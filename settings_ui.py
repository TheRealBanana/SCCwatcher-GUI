# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'settings_ui.ui'
#
# Created: Sun May 03 19:44:14 2015
#      by: PyQt4 UI code generator 4.10
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore, QtGui
from settings_manager import sccwSettingsManager
from settings_ui_actions import guiActions
from functools import partial
from undoredo_system import undoRedoSystem, special_QLineEdit, special_QTextEdit, special_QCheckBox, special_QComboBox, special_QListWidget, special_QSpinBox
import icon_resources_rc


try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)
    


class Ui_sccw_SettingsUI(object):
    def setupUi(self, sccw_SettingsUI):
        self.MainWindow = sccw_SettingsUI
        #Instantiate our settings object, passing windows position and size to set the window to its last known position
        self.SettingsManager = sccwSettingsManager([sccw_SettingsUI.pos, sccw_SettingsUI.size])
        self.elementsToOptions = self.SettingsManager.elementsToOptions
        self.elementAccessMethods = self.SettingsManager.elementAccessMethods
        self.watchListElements = self.SettingsManager.watchListElements
        self.avoidListElements = self.SettingsManager.avoidListElements
        #Set up our actions class with the proper context info
        self.guiActions = guiActions(self)
        #And our undo-redo class
        self.undoRedoSystem = undoRedoSystem(self)
        
        #Setting up the main window
        sccw_SettingsUI.setObjectName(_fromUtf8("sccw_SettingsUI"))
        sccw_SettingsUI.resize(805, 600)
        sccw_SettingsUI.setMinimumSize(QtCore.QSize(805, 600))
        sccw_SettingsUI.setMaximumSize(QtCore.QSize(805, 600))
        font = QtGui.QFont()
        font.setFamily(_fromUtf8("Arial"))
        font.setPointSize(8)
        sccw_SettingsUI.setFont(font)
        self.icon = QtGui.QIcon()
        self.icon.addPixmap(QtGui.QPixmap(_fromUtf8(":/guiIcons/icons/logo.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        sccw_SettingsUI.setWindowIcon(self.icon)
        sccw_SettingsUI.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        
        #Create the main widgets
        self.centralwidget = QtGui.QWidget(sccw_SettingsUI)
        self.centralwidget.setObjectName(_fromUtf8("centralwidget"))
        self.tabWidget = QtGui.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 10, 786, 500))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setMinimumSize(QtCore.QSize(786, 491))
        self.tabWidget.setMaximumSize(QtCore.QSize(786, 500))
        font = QtGui.QFont()
        font.setFamily(_fromUtf8("Arial"))
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        self.tabWidget.setFont(font)
        self.tabWidget.setObjectName(_fromUtf8("tabWidget"))

        
        ## Main tab ##
        
        self.mainTab = QtGui.QWidget()
        self.mainTab.setObjectName(_fromUtf8("mainTab"))
        self.generalGroup = QtGui.QGroupBox(self.mainTab)
        self.generalGroup.setGeometry(QtCore.QRect(10, 10, 411, 241))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.generalGroup.sizePolicy().hasHeightForWidth())
        self.generalGroup.setSizePolicy(sizePolicy)
        self.generalGroup.setMinimumSize(QtCore.QSize(411, 241))
        self.generalGroup.setMaximumSize(QtCore.QSize(411, 241))
        self.generalGroup.setObjectName(_fromUtf8("generalGroup"))
        self.ggMasterAutodlCheck = special_QCheckBox(self.generalGroup)
        self.ggMasterAutodlCheck.setGeometry(QtCore.QRect(20, 160, 151, 17))
        self.ggMasterAutodlCheck.setObjectName(_fromUtf8("ggMasterAutodlCheck"))
        self.ggNetworkDelaySpinbox = special_QSpinBox(self.generalGroup)
        self.ggNetworkDelaySpinbox.setGeometry(QtCore.QRect(195, 120, 51, 22))
        self.ggNetworkDelaySpinbox.setObjectName(_fromUtf8("ggNetworkDelaySpinbox"))
        self.ggNetworkDelaySpinbox.setValue(self.SettingsManager.guiDefaults["allOtherDefaults"]["ggNetworkDelaySpinbox"])
        self.ggNetworkDelayLabel = QtGui.QLabel(self.generalGroup)
        self.ggNetworkDelayLabel.setGeometry(QtCore.QRect(15, 125, 171, 16))
        self.ggNetworkDelayLabel.setObjectName(_fromUtf8("ggNetworkDelayLabel"))
        self.ggPasskeyLabel = QtGui.QLabel(self.generalGroup)
        self.ggPasskeyLabel.setGeometry(QtCore.QRect(15, 30, 51, 16))
        self.ggPasskeyLabel.setObjectName(_fromUtf8("ggPasskeyLabel"))
        self.ggPasskeyTextbox = special_QLineEdit(self.generalGroup)
        self.ggPasskeyTextbox.setGeometry(QtCore.QRect(70, 27, 256, 20))
        self.ggPasskeyTextbox.setEchoMode(QtGui.QLineEdit.PasswordEchoOnEdit)
        self.ggPasskeyTextbox.setObjectName(_fromUtf8("ggPasskeyTextbox"))
        self.ggSavepathLabel = QtGui.QLabel(self.generalGroup)
        self.ggSavepathLabel.setGeometry(QtCore.QRect(15, 60, 51, 16))
        self.ggSavepathLabel.setObjectName(_fromUtf8("ggSavepathLabel"))
        self.ggLogpathLabel = QtGui.QLabel(self.generalGroup)
        self.ggLogpathLabel.setGeometry(QtCore.QRect(15, 90, 46, 13))
        self.ggLogpathLabel.setObjectName(_fromUtf8("ggLogpathLabel"))
        self.ggSavepathTextbox = special_QLineEdit(self.generalGroup)
        self.ggSavepathTextbox.setGeometry(QtCore.QRect(70, 57, 256, 20))
        self.ggSavepathTextbox.setObjectName(_fromUtf8("ggSavepathTextbox"))
        self.ggLogpathTextbox = special_QLineEdit(self.generalGroup)
        self.ggLogpathTextbox.setGeometry(QtCore.QRect(70, 87, 256, 20))
        self.ggLogpathTextbox.setObjectName(_fromUtf8("ggLogpathTextbox"))
        self.ggSavepathBrowseButton = QtGui.QPushButton(self.generalGroup)
        self.ggSavepathBrowseButton.setGeometry(QtCore.QRect(340, 55, 56, 23))
        self.ggSavepathBrowseButton.setObjectName(_fromUtf8("ggSavepathBrowseButton"))
        self.ggLogpathBrowseButton = QtGui.QPushButton(self.generalGroup)
        self.ggLogpathBrowseButton.setGeometry(QtCore.QRect(340, 85, 56, 23))
        self.ggLogpathBrowseButton.setObjectName(_fromUtf8("ggLogpathBrowseButton"))
        self.ggEnableLoggingCheck = special_QCheckBox(self.generalGroup)
        self.ggEnableLoggingCheck.setGeometry(QtCore.QRect(190, 160, 141, 17))
        self.ggEnableLoggingCheck.setObjectName(_fromUtf8("ggEnableLoggingCheck"))
        self.ggEnableVerboseCheck = special_QCheckBox(self.generalGroup)
        self.ggEnableVerboseCheck.setGeometry(QtCore.QRect(20, 185, 151, 17))
        self.ggEnableVerboseCheck.setObjectName(_fromUtf8("ggEnableVerboseCheck"))
        self.ggBeepCheckbox = special_QCheckBox(self.generalGroup)
        self.ggBeepCheckbox.setGeometry(QtCore.QRect(20, 210, 141, 17))
        self.ggBeepCheckbox.setObjectName(_fromUtf8("ggBeepCheckbox"))
        self.ggVerboseTabLabel = QtGui.QLabel(self.generalGroup)
        self.ggVerboseTabLabel.setGeometry(QtCore.QRect(190, 186, 101, 16))
        self.ggVerboseTabLabel.setObjectName(_fromUtf8("ggVerboseTabLabel"))
        self.ggVerboseTabTextbox = special_QLineEdit(self.generalGroup)
        self.ggVerboseTabTextbox.setGeometry(QtCore.QRect(295, 185, 96, 20))
        self.ggVerboseTabTextbox.setObjectName(_fromUtf8("ggVerboseTabTextbox"))
        self.ggEnableDebugCheck = special_QCheckBox(self.generalGroup)
        self.ggEnableDebugCheck.setGeometry(QtCore.QRect(190, 210, 131, 17))
        self.ggEnableDebugCheck.setObjectName(_fromUtf8("ggEnableDebugCheck"))
        self.ggEnableDebugCheck.setTristate(False)
        self.scriptStatusGroup = QtGui.QGroupBox(self.mainTab)
        self.scriptStatusGroup.setGeometry(QtCore.QRect(427, 10, 346, 451))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scriptStatusGroup.sizePolicy().hasHeightForWidth())
        self.scriptStatusGroup.setSizePolicy(sizePolicy)
        self.scriptStatusGroup.setMinimumSize(QtCore.QSize(346, 451))
        self.scriptStatusGroup.setMaximumSize(QtCore.QSize(346, 451))
        self.scriptStatusGroup.setObjectName(_fromUtf8("scriptStatusGroup"))
        self.ssVersionLabel = QtGui.QLabel(self.scriptStatusGroup)
        self.ssVersionLabel.setGeometry(QtCore.QRect(20, 30, 111, 16))
        self.ssVersionLabel.setObjectName(_fromUtf8("ssVersionLabel"))
        self.ssVersionState = QtGui.QLabel(self.scriptStatusGroup)
        self.ssVersionState.setGeometry(QtCore.QRect(250, 30, 86, 13))
        self.ssVersionState.setObjectName(_fromUtf8("ssVersionState"))
        self.ssStatusLabel = QtGui.QLabel(self.scriptStatusGroup)
        self.ssStatusLabel.setGeometry(QtCore.QRect(20, 65, 121, 16))
        self.ssStatusLabel.setObjectName(_fromUtf8("ssStatusLabel"))
        self.ssStatusState = QtGui.QLabel(self.scriptStatusGroup)
        self.ssStatusState.setGeometry(QtCore.QRect(250, 65, 86, 13))
        self.ssStatusState.setObjectName(_fromUtf8("ssStatusState"))
        self.ssSSLDownloadLabel = QtGui.QLabel(self.scriptStatusGroup)
        self.ssSSLDownloadLabel.setGeometry(QtCore.QRect(20, 100, 101, 16))
        self.ssSSLDownloadLabel.setObjectName(_fromUtf8("ssSSLDownloadLabel"))
        self.ssSSLDownloadState = QtGui.QLabel(self.scriptStatusGroup)
        self.ssSSLDownloadState.setGeometry(QtCore.QRect(250, 100, 86, 13))
        self.ssSSLDownloadState.setObjectName(_fromUtf8("ssSSLDownloadState"))
        self.ssCloudflareLabel = QtGui.QLabel(self.scriptStatusGroup)
        self.ssCloudflareLabel.setGeometry(QtCore.QRect(20, 205, 131, 16))
        self.ssCloudflareLabel.setObjectName(_fromUtf8("ssCloudflareLabel"))
        self.ssCloudflareState = QtGui.QLabel(self.scriptStatusGroup)
        self.ssCloudflareState.setGeometry(QtCore.QRect(250, 205, 86, 13))
        self.ssCloudflareState.setObjectName(_fromUtf8("ssCloudflareState"))
        self.ssDupecheckingLabel = QtGui.QLabel(self.scriptStatusGroup)
        self.ssDupecheckingLabel.setGeometry(QtCore.QRect(20, 240, 81, 16))
        self.ssDupecheckingLabel.setObjectName(_fromUtf8("ssDupecheckingLabel"))
        self.ssDupecheckingState = QtGui.QLabel(self.scriptStatusGroup)
        self.ssDupecheckingState.setGeometry(QtCore.QRect(250, 240, 86, 13))
        self.ssDupecheckingState.setObjectName(_fromUtf8("ssDupecheckingState"))
        self.ssLoggingLabel = QtGui.QLabel(self.scriptStatusGroup)
        self.ssLoggingLabel.setGeometry(QtCore.QRect(20, 275, 91, 16))
        self.ssLoggingLabel.setObjectName(_fromUtf8("ssLoggingLabel"))
        self.ssLoggingState = QtGui.QLabel(self.scriptStatusGroup)
        self.ssLoggingState.setGeometry(QtCore.QRect(250, 275, 86, 13))
        self.ssLoggingState.setObjectName(_fromUtf8("ssLoggingState"))
        self.ssRecentLabel = QtGui.QLabel(self.scriptStatusGroup)
        self.ssRecentLabel.setGeometry(QtCore.QRect(20, 345, 121, 16))
        self.ssRecentLabel.setObjectName(_fromUtf8("ssRecentLabel"))
        self.ssRecentState = QtGui.QLabel(self.scriptStatusGroup)
        self.ssRecentState.setGeometry(QtCore.QRect(250, 345, 86, 13))
        self.ssRecentState.setObjectName(_fromUtf8("ssRecentState"))
        self.ssWatchAvoidLabel = QtGui.QLabel(self.scriptStatusGroup)
        self.ssWatchAvoidLabel.setGeometry(QtCore.QRect(20, 380, 151, 16))
        self.ssWatchAvoidLabel.setObjectName(_fromUtf8("ssWatchAvoidLabel"))
        self.ssWatchAvoidState = QtGui.QLabel(self.scriptStatusGroup)
        self.ssWatchAvoidState.setGeometry(QtCore.QRect(250, 380, 86, 16))
        self.ssWatchAvoidState.setObjectName(_fromUtf8("ssWatchAvoidState"))
        self.ssMaxTriesLabel = QtGui.QLabel(self.scriptStatusGroup)
        self.ssMaxTriesLabel.setGeometry(QtCore.QRect(20, 135, 151, 16))
        self.ssMaxTriesLabel.setObjectName(_fromUtf8("ssMaxTriesLabel"))
        self.ssRetryDelayLabel = QtGui.QLabel(self.scriptStatusGroup)
        self.ssRetryDelayLabel.setGeometry(QtCore.QRect(20, 170, 136, 16))
        self.ssRetryDelayLabel.setObjectName(_fromUtf8("ssRetryDelayLabel"))
        self.ssMaxTriesState = QtGui.QLabel(self.scriptStatusGroup)
        self.ssMaxTriesState.setGeometry(QtCore.QRect(250, 135, 86, 16))
        self.ssMaxTriesState.setObjectName(_fromUtf8("ssMaxTriesState"))
        self.ssRetryDelayState = QtGui.QLabel(self.scriptStatusGroup)
        self.ssRetryDelayState.setGeometry(QtCore.QRect(250, 170, 86, 16))
        self.ssRetryDelayState.setObjectName(_fromUtf8("ssRetryDelayState"))
        self.ssVerboseState = QtGui.QLabel(self.scriptStatusGroup)
        self.ssVerboseState.setGeometry(QtCore.QRect(250, 310, 86, 13))
        self.ssVerboseState.setObjectName(_fromUtf8("ssVerboseState"))
        self.ssVerboseLabel = QtGui.QLabel(self.scriptStatusGroup)
        self.ssVerboseLabel.setGeometry(QtCore.QRect(20, 310, 111, 16))
        self.ssVerboseLabel.setObjectName(_fromUtf8("ssVerboseLabel"))
        self.scriptControlGroup = QtGui.QGroupBox(self.mainTab)
        self.scriptControlGroup.setEnabled(True)
        self.scriptControlGroup.setGeometry(QtCore.QRect(10, 255, 411, 206))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scriptControlGroup.sizePolicy().hasHeightForWidth())
        self.scriptControlGroup.setSizePolicy(sizePolicy)
        self.scriptControlGroup.setFlat(False)
        self.scriptControlGroup.setObjectName(_fromUtf8("scriptControlGroup"))
        self.scButtonFrame = QtGui.QFrame(self.scriptControlGroup)
        self.scButtonFrame.setEnabled(False)
        self.scButtonFrame.setGeometry(QtCore.QRect(113, 85, 186, 99))
        self.scButtonFrame.setFrameShape(QtGui.QFrame.NoFrame)
        self.scButtonFrame.setFrameShadow(QtGui.QFrame.Plain)
        self.scButtonFrame.setLineWidth(0)
        self.scButtonFrame.setObjectName(_fromUtf8("scButtonFrame"))
        self.gridLayout = QtGui.QGridLayout(self.scButtonFrame)
        self.gridLayout.setObjectName(_fromUtf8("gridLayout"))
        self.scbfReloadScriptSettingsButton = QtGui.QPushButton(self.scButtonFrame)
        self.scbfReloadScriptSettingsButton.setObjectName(_fromUtf8("scbfReloadScriptSettingsButton"))
        self.gridLayout.addWidget(self.scbfReloadScriptSettingsButton, 0, 0, 1, 1)
        self.scbfToggleAutodlButton = QtGui.QPushButton(self.scButtonFrame)
        self.scbfToggleAutodlButton.setObjectName(_fromUtf8("scbfToggleAutodlButton"))
        self.gridLayout.addWidget(self.scbfToggleAutodlButton, 1, 0, 1, 1)
        self.scbfEditCurIniButton = QtGui.QPushButton(self.scButtonFrame)
        self.scbfEditCurIniButton.setObjectName(_fromUtf8("scbfEditCurIniButton"))
        self.gridLayout.addWidget(self.scbfEditCurIniButton, 2, 0, 1, 1)
        self.scConStatusFrame = QtGui.QFrame(self.scriptControlGroup)
        self.scConStatusFrame.setGeometry(QtCore.QRect(42, 30, 331, 43))
        self.scConStatusFrame.setFrameShape(QtGui.QFrame.NoFrame)
        self.scConStatusFrame.setFrameShadow(QtGui.QFrame.Plain)
        self.scConStatusFrame.setLineWidth(0)
        self.scConStatusFrame.setObjectName(_fromUtf8("scConStatusFrame"))
        self.sccsConStatusLabel = QtGui.QLabel(self.scConStatusFrame)
        self.sccsConStatusLabel.setGeometry(QtCore.QRect(10, 10, 132, 19))
        self.sccsConStatusLabel.setObjectName(_fromUtf8("sccsConStatusLabel"))
        self.sccsConStatusState = QtGui.QLabel(self.scConStatusFrame)
        self.sccsConStatusState.setGeometry(QtCore.QRect(165, 10, 151, 19))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.sccsConStatusState.setFont(font)
        self.sccsConStatusState.setTextFormat(QtCore.Qt.RichText)
        self.sccsConStatusState.setAlignment(QtCore.Qt.AlignCenter)
        self.sccsConStatusState.setObjectName(_fromUtf8("sccsConStatusState"))
        self.scNetworkSettingsButton = QtGui.QPushButton(self.scriptControlGroup)
        self.scNetworkSettingsButton.setGeometry(QtCore.QRect(379, 14, 24, 24))
        self.scNetworkSettingsButton.setText(_fromUtf8(""))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(_fromUtf8(":/guiIcons/icons/settings.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.scNetworkSettingsButton.setIcon(icon1)
        self.scNetworkSettingsButton.setAutoDefault(False)
        self.scNetworkSettingsButton.setFlat(False)
        self.scNetworkSettingsButton.setObjectName(_fromUtf8("scNetworkSettingsButton"))
        self.tabWidget.addTab(self.mainTab, _fromUtf8(""))
        
        
        ## Download/Upload Settings Tab ##
        self.downloadUploadTab = QtGui.QWidget()
        self.downloadUploadTab.setObjectName(_fromUtf8("downloadUploadTab"))
        self.generalDownloadSettingsGroup = QtGui.QGroupBox(self.downloadUploadTab)
        self.generalDownloadSettingsGroup.setGeometry(QtCore.QRect(15, 15, 346, 236))
        self.generalDownloadSettingsGroup.setObjectName(_fromUtf8("generalDownloadSettingsGroup"))
        self.globalSSLDownloadCheck = special_QCheckBox(self.generalDownloadSettingsGroup)
        self.globalSSLDownloadCheck.setGeometry(QtCore.QRect(189, 25, 121, 17))
        self.globalSSLDownloadCheck.setObjectName(_fromUtf8("globalSSLDownloadCheck"))
        self.globalDupecheckCheck = special_QCheckBox(self.generalDownloadSettingsGroup)
        self.globalDupecheckCheck.setGeometry(QtCore.QRect(53, 25, 101, 17))
        self.globalDupecheckCheck.setObjectName(_fromUtf8("globalDupecheckCheck"))
        self.globalSizeLimitLowerSuffixSelector = special_QComboBox(self.generalDownloadSettingsGroup)
        self.globalSizeLimitLowerSuffixSelector.setGeometry(QtCore.QRect(149, 58, 51, 22))
        self.globalSizeLimitLowerSuffixSelector.setObjectName(_fromUtf8("globalSizeLimitLowerSuffixSelector"))
        self.globalSizeLimitLowerSuffixSelector.addItem(_fromUtf8(""))
        self.globalSizeLimitLowerSuffixSelector.setItemText(0, _fromUtf8(""))
        self.globalSizeLimitLowerSuffixSelector.addItem(_fromUtf8(""))
        self.globalSizeLimitLowerSuffixSelector.addItem(_fromUtf8(""))
        self.globalSizeLimitLowerSuffixSelector.addItem(_fromUtf8(""))
        self.globalSizeLimitUpperTextbox = special_QLineEdit(self.generalDownloadSettingsGroup)
        self.globalSizeLimitUpperTextbox.setGeometry(QtCore.QRect(104, 89, 41, 20))
        self.globalSizeLimitUpperTextbox.setObjectName(_fromUtf8("globalSizeLimitUpperTextbox"))
        self.globalSizeLimitUpperLabel = QtGui.QLabel(self.generalDownloadSettingsGroup)
        self.globalSizeLimitUpperLabel.setGeometry(QtCore.QRect(14, 91, 91, 16))
        self.globalSizeLimitUpperLabel.setObjectName(_fromUtf8("globalSizeLimitUpperLabel"))
        self.globalSizeLimitUpperSuffixSelector = special_QComboBox(self.generalDownloadSettingsGroup)
        self.globalSizeLimitUpperSuffixSelector.setGeometry(QtCore.QRect(149, 88, 51, 22))
        self.globalSizeLimitUpperSuffixSelector.setObjectName(_fromUtf8("globalSizeLimitUpperSuffixSelector"))
        self.globalSizeLimitUpperSuffixSelector.addItem(_fromUtf8(""))
        self.globalSizeLimitUpperSuffixSelector.setItemText(0, _fromUtf8(""))
        self.globalSizeLimitUpperSuffixSelector.addItem(_fromUtf8(""))
        self.globalSizeLimitUpperSuffixSelector.addItem(_fromUtf8(""))
        self.globalSizeLimitUpperSuffixSelector.addItem(_fromUtf8(""))
        self.globalSizeLimitLowerTextbox = special_QLineEdit(self.generalDownloadSettingsGroup)
        self.globalSizeLimitLowerTextbox.setGeometry(QtCore.QRect(104, 59, 41, 20))
        self.globalSizeLimitLowerTextbox.setObjectName(_fromUtf8("globalSizeLimitLowerTextbox"))
        self.globalSizeLimitLowerLabel = QtGui.QLabel(self.generalDownloadSettingsGroup)
        self.globalSizeLimitLowerLabel.setGeometry(QtCore.QRect(14, 61, 91, 16))
        self.globalSizeLimitLowerLabel.setObjectName(_fromUtf8("globalSizeLimitLowerLabel"))
        self.globalCFBypassLabel = QtGui.QLabel(self.generalDownloadSettingsGroup)
        self.globalCFBypassLabel.setGeometry(QtCore.QRect(10, 135, 136, 16))
        self.globalCFBypassLabel.setObjectName(_fromUtf8("globalCFBypassLabel"))
        self.globalHorizontalDivider = QtGui.QFrame(self.generalDownloadSettingsGroup)
        self.globalHorizontalDivider.setGeometry(QtCore.QRect(22, 120, 301, 16))
        self.globalHorizontalDivider.setFrameShape(QtGui.QFrame.HLine)
        self.globalHorizontalDivider.setFrameShadow(QtGui.QFrame.Sunken)
        self.globalHorizontalDivider.setObjectName(_fromUtf8("globalHorizontalDivider"))
        self.globalCFBypassCookiefileLabel = QtGui.QLabel(self.generalDownloadSettingsGroup)
        self.globalCFBypassCookiefileLabel.setGeometry(QtCore.QRect(10, 165, 61, 16))
        self.globalCFBypassCookiefileLabel.setObjectName(_fromUtf8("globalCFBypassCookiefileLabel"))
        self.globalCFBypassCookiefileBrowseButton = QtGui.QPushButton(self.generalDownloadSettingsGroup)
        self.globalCFBypassCookiefileBrowseButton.setGeometry(QtCore.QRect(285, 160, 51, 23))
        self.globalCFBypassCookiefileBrowseButton.setObjectName(_fromUtf8("globalCFBypassCookiefileBrowseButton"))
        self.globalCFBypassCookiefilePathTextbox = special_QLineEdit(self.generalDownloadSettingsGroup)
        self.globalCFBypassCookiefilePathTextbox.setGeometry(QtCore.QRect(72, 162, 196, 20))
        self.globalCFBypassCookiefilePathTextbox.setObjectName(_fromUtf8("globalCFBypassCookiefilePathTextbox"))
        self.globalCFBypassUseragentLabel = QtGui.QLabel(self.generalDownloadSettingsGroup)
        self.globalCFBypassUseragentLabel.setGeometry(QtCore.QRect(10, 200, 91, 16))
        self.globalCFBypassUseragentLabel.setObjectName(_fromUtf8("globalCFBypassUseragentLabel"))
        self.globalCFBypassUseragentTextbox = special_QLineEdit(self.generalDownloadSettingsGroup)
        self.globalCFBypassUseragentTextbox.setGeometry(QtCore.QRect(100, 197, 166, 20))
        self.globalCFBypassUseragentTextbox.setObjectName(_fromUtf8("globalCFBypassUseragentTextbox"))
        self.globalRetryWaitLabel = QtGui.QLabel(self.generalDownloadSettingsGroup)
        self.globalRetryWaitLabel.setGeometry(QtCore.QRect(221, 91, 56, 16))
        self.globalRetryWaitLabel.setObjectName(_fromUtf8("globalRetryWaitLabel"))
        self.globalMaxTriesLabel = QtGui.QLabel(self.generalDownloadSettingsGroup)
        self.globalMaxTriesLabel.setGeometry(QtCore.QRect(221, 61, 61, 21))
        self.globalMaxTriesLabel.setObjectName(_fromUtf8("globalMaxTriesLabel"))
        self.globalMaxTriesSpinbox = special_QSpinBox(self.generalDownloadSettingsGroup)
        self.globalMaxTriesSpinbox.setGeometry(QtCore.QRect(289, 59, 42, 22))
        self.globalMaxTriesSpinbox.setObjectName(_fromUtf8("globalMaxTriesSpinbox"))
        self.globalMaxTriesSpinbox.setValue(self.SettingsManager.guiDefaults["allOtherDefaults"]["globalMaxTriesSpinbox"])
        self.globalRetryWaitSpinbox = special_QSpinBox(self.generalDownloadSettingsGroup)
        self.globalRetryWaitSpinbox.setGeometry(QtCore.QRect(289, 88, 42, 22))
        self.globalRetryWaitSpinbox.setObjectName(_fromUtf8("globalRetryWaitSpinbox"))
        self.globalRetryWaitSpinbox.setValue(self.SettingsManager.guiDefaults["allOtherDefaults"]["globalRetryWaitSpinbox"])
        self.utWebUiUploadGroup = QtGui.QGroupBox(self.downloadUploadTab)
        self.utWebUiUploadGroup.setGeometry(QtCore.QRect(415, 275, 351, 171))
        self.utWebUiUploadGroup.setObjectName(_fromUtf8("utWebUiUploadGroup"))
        self.utwuiMasterEnableTriCheck = special_QCheckBox(self.utWebUiUploadGroup)
        self.utwuiMasterEnableTriCheck.setGeometry(QtCore.QRect(15, 20, 161, 17))
        self.utwuiMasterEnableTriCheck.setTristate(True)
        self.utwuiMasterEnableTriCheck.setObjectName(_fromUtf8("utwuiMasterEnableTriCheck"))
        self.utwuiStateLabel = QtGui.QLabel(self.utWebUiUploadGroup)
        self.utwuiStateLabel.setGeometry(QtCore.QRect(185, 20, 166, 16))
        self.utwuiStateLabel.setObjectName(_fromUtf8("utwuiStateLabel"))
        self.utwuiPortLabel = QtGui.QLabel(self.utWebUiUploadGroup)
        self.utwuiPortLabel.setGeometry(QtCore.QRect(270, 65, 31, 16))
        self.utwuiPortLabel.setObjectName(_fromUtf8("utwuiPortLabel"))
        self.utwuiHostnameLabel = QtGui.QLabel(self.utWebUiUploadGroup)
        self.utwuiHostnameLabel.setGeometry(QtCore.QRect(15, 65, 71, 16))
        self.utwuiHostnameLabel.setObjectName(_fromUtf8("utwuiHostnameLabel"))
        self.utwuiPortTextbox = special_QLineEdit(self.utWebUiUploadGroup)
        self.utwuiPortTextbox.setGeometry(QtCore.QRect(300, 62, 41, 20))
        self.utwuiPortTextbox.setInputMethodHints(QtCore.Qt.ImhDigitsOnly)
        self.utwuiPortTextbox.setMaxLength(5)
        self.utwuiPortTextbox.setObjectName(_fromUtf8("utwuiPortTextbox"))
        self.utwuiPasswordLabel = QtGui.QLabel(self.utWebUiUploadGroup)
        self.utwuiPasswordLabel.setGeometry(QtCore.QRect(15, 135, 61, 16))
        self.utwuiPasswordLabel.setObjectName(_fromUtf8("utwuiPasswordLabel"))
        self.utwuiPasswordTextbox = special_QLineEdit(self.utWebUiUploadGroup)
        self.utwuiPasswordTextbox.setGeometry(QtCore.QRect(95, 132, 166, 20))
        self.utwuiPasswordTextbox.setEchoMode(QtGui.QLineEdit.Password)
        self.utwuiPasswordTextbox.setObjectName(_fromUtf8("utwuiPasswordTextbox"))
        self.utwuiUsernameTextbox = special_QLineEdit(self.utWebUiUploadGroup)
        self.utwuiUsernameTextbox.setGeometry(QtCore.QRect(95, 97, 166, 20))
        self.utwuiUsernameTextbox.setObjectName(_fromUtf8("utwuiUsernameTextbox"))
        self.utwuiHostnameTextbox = special_QLineEdit(self.utWebUiUploadGroup)
        self.utwuiHostnameTextbox.setGeometry(QtCore.QRect(95, 62, 166, 20))
        self.utwuiHostnameTextbox.setObjectName(_fromUtf8("utwuiHostnameTextbox"))
        self.utwuiUsernameLabel = QtGui.QLabel(self.utWebUiUploadGroup)
        self.utwuiUsernameLabel.setGeometry(QtCore.QRect(15, 100, 61, 16))
        self.utwuiUsernameLabel.setObjectName(_fromUtf8("utwuiUsernameLabel"))
        self.ftpUploadGroup = QtGui.QGroupBox(self.downloadUploadTab)
        self.ftpUploadGroup.setGeometry(QtCore.QRect(415, 15, 356, 236))
        self.ftpUploadGroup.setObjectName(_fromUtf8("ftpUploadGroup"))
        self.ftpMasterEnableCheck = special_QCheckBox(self.ftpUploadGroup)
        self.ftpMasterEnableCheck.setGeometry(QtCore.QRect(15, 20, 141, 17))
        self.ftpMasterEnableCheck.setObjectName(_fromUtf8("ftpMasterEnableCheck"))
        self.ftpHostnameTextbox = special_QLineEdit(self.ftpUploadGroup)
        self.ftpHostnameTextbox.setGeometry(QtCore.QRect(100, 62, 166, 20))
        self.ftpHostnameTextbox.setObjectName(_fromUtf8("ftpHostnameTextbox"))
        self.ftpUsernameTextbox = special_QLineEdit(self.ftpUploadGroup)
        self.ftpUsernameTextbox.setGeometry(QtCore.QRect(100, 97, 166, 20))
        self.ftpUsernameTextbox.setObjectName(_fromUtf8("ftpUsernameTextbox"))
        self.ftpPasswordTextbox = special_QLineEdit(self.ftpUploadGroup)
        self.ftpPasswordTextbox.setGeometry(QtCore.QRect(100, 132, 166, 20))
        self.ftpPasswordTextbox.setEchoMode(QtGui.QLineEdit.Password)
        self.ftpPasswordTextbox.setObjectName(_fromUtf8("ftpPasswordTextbox"))
        self.ftpPortTextbox = special_QLineEdit(self.ftpUploadGroup)
        self.ftpPortTextbox.setGeometry(QtCore.QRect(305, 62, 41, 20))
        self.ftpPortTextbox.setInputMethodHints(QtCore.Qt.ImhDigitsOnly)
        self.ftpPortTextbox.setMaxLength(5)
        self.ftpPortTextbox.setObjectName(_fromUtf8("ftpPortTextbox"))
        self.ftpHostnameLabel = QtGui.QLabel(self.ftpUploadGroup)
        self.ftpHostnameLabel.setGeometry(QtCore.QRect(20, 65, 71, 16))
        self.ftpHostnameLabel.setObjectName(_fromUtf8("ftpHostnameLabel"))
        self.ftpUsernameLabel = QtGui.QLabel(self.ftpUploadGroup)
        self.ftpUsernameLabel.setGeometry(QtCore.QRect(20, 100, 61, 16))
        self.ftpUsernameLabel.setObjectName(_fromUtf8("ftpUsernameLabel"))
        self.ftpPasswordLabel = QtGui.QLabel(self.ftpUploadGroup)
        self.ftpPasswordLabel.setGeometry(QtCore.QRect(20, 135, 61, 16))
        self.ftpPasswordLabel.setObjectName(_fromUtf8("ftpPasswordLabel"))
        self.ftpPortLabel = QtGui.QLabel(self.ftpUploadGroup)
        self.ftpPortLabel.setGeometry(QtCore.QRect(275, 65, 31, 16))
        self.ftpPortLabel.setObjectName(_fromUtf8("ftpPortLabel"))
        self.ftpRemoteFolderLabel = QtGui.QLabel(self.ftpUploadGroup)
        self.ftpRemoteFolderLabel.setGeometry(QtCore.QRect(20, 170, 81, 16))
        self.ftpRemoteFolderLabel.setObjectName(_fromUtf8("ftpRemoteFolderLabel"))
        self.ftpRemoteFolderTextbox = special_QLineEdit(self.ftpUploadGroup)
        self.ftpRemoteFolderTextbox.setGeometry(QtCore.QRect(100, 167, 166, 20))
        self.ftpRemoteFolderTextbox.setObjectName(_fromUtf8("ftpRemoteFolderTextbox"))
        self.ftpPasvModeCheck = special_QCheckBox(self.ftpUploadGroup)
        self.ftpPasvModeCheck.setGeometry(QtCore.QRect(20, 205, 141, 17))
        self.ftpPasvModeCheck.setObjectName(_fromUtf8("ftpPasvModeCheck"))
        self.ftpPasvModeCheck.setChecked(True)
        self.ftpTLSModeCheck = special_QCheckBox(self.ftpUploadGroup)
        self.ftpTLSModeCheck.setGeometry(QtCore.QRect(175, 205, 111, 17))
        self.ftpTLSModeCheck.setObjectName(_fromUtf8("ftpTLSModeCheck"))
        self.externalCommandGroup = QtGui.QGroupBox(self.downloadUploadTab)
        self.externalCommandGroup.setGeometry(QtCore.QRect(15, 275, 341, 136))
        self.externalCommandGroup.setObjectName(_fromUtf8("externalCommandGroup"))
        self.extCmdBrowseButton = QtGui.QPushButton(self.externalCommandGroup)
        self.extCmdBrowseButton.setGeometry(QtCore.QRect(285, 60, 51, 23))
        self.extCmdBrowseButton.setObjectName(_fromUtf8("extCmdBrowseButton"))
        self.extCmdExeLocation = special_QLineEdit(self.externalCommandGroup)
        self.extCmdExeLocation.setGeometry(QtCore.QRect(95, 62, 181, 20))
        self.extCmdExeLocation.setObjectName(_fromUtf8("extCmdExeLocation"))
        self.extCmdMasterEnableCheck = special_QCheckBox(self.externalCommandGroup)
        self.extCmdMasterEnableCheck.setGeometry(QtCore.QRect(20, 25, 161, 17))
        self.extCmdMasterEnableCheck.setObjectName(_fromUtf8("extCmdMasterEnableCheck"))
        self.extCmdSelectProgramLabel = QtGui.QLabel(self.externalCommandGroup)
        self.extCmdSelectProgramLabel.setGeometry(QtCore.QRect(10, 65, 91, 16))
        self.extCmdSelectProgramLabel.setObjectName(_fromUtf8("extCmdSelectProgramLabel"))
        self.extCmdArguemtsLabel = QtGui.QLabel(self.externalCommandGroup)
        self.extCmdArguemtsLabel.setGeometry(QtCore.QRect(10, 100, 66, 16))
        self.extCmdArguemtsLabel.setObjectName(_fromUtf8("extCmdArguemtsLabel"))
        self.extCmdExeArguments = special_QLineEdit(self.externalCommandGroup)
        self.extCmdExeArguments.setGeometry(QtCore.QRect(95, 97, 181, 20))
        self.extCmdExeArguments.setObjectName(_fromUtf8("extCmdExeArguments"))
        self.tabWidget.addTab(self.downloadUploadTab, _fromUtf8(""))
        
        
        ## Watchlist Tab ##
        self.watchlistTab = QtGui.QWidget()
        self.watchlistTab.setObjectName(_fromUtf8("watchlistTab"))
        self.horizontalLayout = QtGui.QHBoxLayout(self.watchlistTab)
        self.horizontalLayout.setObjectName(_fromUtf8("horizontalLayout"))
        self.watchlistGroup = QtGui.QGroupBox(self.watchlistTab)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.watchlistGroup.sizePolicy().hasHeightForWidth())
        self.watchlistGroup.setSizePolicy(sizePolicy)
        self.watchlistGroup.setMinimumSize(QtCore.QSize(300, 447))
        self.watchlistGroup.setMaximumSize(QtCore.QSize(300, 447))
        self.watchlistGroup.setObjectName(_fromUtf8("watchlistGroup"))
        self.WLGaddEntryButton = QtGui.QPushButton(self.watchlistGroup)
        self.WLGaddEntryButton.setGeometry(QtCore.QRect(12, 414, 20, 20))
        font = QtGui.QFont()
        font.setFamily(_fromUtf8("Arial"))
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        font.setKerning(True)
        self.WLGaddEntryButton.setFont(font)
        self.WLGaddEntryButton.setMouseTracking(False)
        self.WLGaddEntryButton.setText(_fromUtf8(""))
        green_plus_icon = QtGui.QIcon()
        green_plus_icon.addPixmap(QtGui.QPixmap(_fromUtf8(":/guiIcons/icons/plus-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.WLGaddEntryButton.setIcon(green_plus_icon)
        self.WLGaddEntryButton.setObjectName(_fromUtf8("WLGaddEntryButton"))
        self.WLGremoveEntryButton = QtGui.QPushButton(self.watchlistGroup)
        self.WLGremoveEntryButton.setGeometry(QtCore.QRect(36, 414, 20, 20))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.WLGremoveEntryButton.setFont(font)
        self.WLGremoveEntryButton.setText(_fromUtf8(""))
        red_x_icon = QtGui.QIcon()
        red_x_icon.addPixmap(QtGui.QPixmap(_fromUtf8(":/guiIcons/icons/delete-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.WLGremoveEntryButton.setIcon(red_x_icon)
        self.WLGremoveEntryButton.setObjectName(_fromUtf8("WLGremoveEntryButton"))
        self.WLGwatchlistItemsList = special_QListWidget(self.watchlistGroup)
        self.WLGwatchlistItemsList.setGeometry(QtCore.QRect(10, 20, 281, 391))
        self.WLGwatchlistItemsList.setObjectName(_fromUtf8("WLGwatchlistItemsList"))
        self.WLGwatchlistItemsList.setSelectionMode(QtGui.QAbstractItemView.SingleSelection)
        self.horizontalLayout.addWidget(self.watchlistGroup)
        spacerItem = QtGui.QSpacerItem(6, 20, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.watchlistSettingsGroup = QtGui.QGroupBox(self.watchlistTab)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.watchlistSettingsGroup.sizePolicy().hasHeightForWidth())
        self.watchlistSettingsGroup.setSizePolicy(sizePolicy)
        self.watchlistSettingsGroup.setMinimumSize(QtCore.QSize(450, 447))
        self.watchlistSettingsGroup.setMaximumSize(QtCore.QSize(450, 447))
        self.watchlistSettingsGroup.setObjectName(_fromUtf8("watchlistSettingsGroup"))
        #Disabled on start
        self.watchlistSettingsGroup.setDisabled(True)
        self.WLSGwatchNameTextbox = special_QLineEdit(self.watchlistSettingsGroup)
        self.WLSGwatchNameTextbox.setGeometry(QtCore.QRect(90, 22, 291, 20))
        self.WLSGwatchNameTextbox.setObjectName(_fromUtf8("WLSGwatchNameTextbox"))
        self.WLSGwatchNameLabel = QtGui.QLabel(self.watchlistSettingsGroup)
        self.WLSGwatchNameLabel.setGeometry(QtCore.QRect(15, 25, 71, 16))
        self.WLSGwatchNameLabel.setObjectName(_fromUtf8("WLSGwatchNameLabel"))
        self.WLSGwatchFilterLabel = QtGui.QLabel(self.watchlistSettingsGroup)
        self.WLSGwatchFilterLabel.setGeometry(QtCore.QRect(15, 60, 66, 16))
        self.WLSGwatchFilterLabel.setObjectName(_fromUtf8("WLSGwatchFilterLabel"))
        self.WLSGwatchFilterTextbox = special_QLineEdit(self.watchlistSettingsGroup)
        self.WLSGwatchFilterTextbox.setGeometry(QtCore.QRect(90, 57, 291, 20))
        self.WLSGwatchFilterTextbox.setObjectName(_fromUtf8("WLSGwatchFilterTextbox"))
        self.WLSGwatchFilterRegexCheck = special_QCheckBox(self.watchlistSettingsGroup)
        self.WLSGwatchFilterRegexCheck.setGeometry(QtCore.QRect(390, 58, 61, 17))
        self.WLSGwatchFilterRegexCheck.setObjectName(_fromUtf8("WLSGwatchFilterRegexCheck"))
        self.WLSGavoidFilterListLabel = QtGui.QLabel(self.watchlistSettingsGroup)
        self.WLSGavoidFilterListLabel.setGeometry(QtCore.QRect(15, 95, 86, 16))
        self.WLSGavoidFilterListLabel.setObjectName(_fromUtf8("WLSGavoidFilterListLabel"))
        self.WLSGavoidFilterListTextbox = special_QLineEdit(self.watchlistSettingsGroup)
        self.WLSGavoidFilterListTextbox.setGeometry(QtCore.QRect(100, 92, 281, 20))
        self.WLSGavoidFilterListTextbox.setObjectName(_fromUtf8("WLSGavoidFilterListTextbox"))
        self.WLSGavoidFilterListRegexCheck = special_QCheckBox(self.watchlistSettingsGroup)
        self.WLSGavoidFilterListRegexCheck.setGeometry(QtCore.QRect(390, 93, 61, 17))
        self.WLSGavoidFilterListRegexCheck.setObjectName(_fromUtf8("WLSGavoidFilterListRegexCheck"))
        self.WLSGwatchCatListLabel = QtGui.QLabel(self.watchlistSettingsGroup)
        self.WLSGwatchCatListLabel.setGeometry(QtCore.QRect(15, 130, 106, 16))
        self.WLSGwatchCatListLabel.setObjectName(_fromUtf8("WLSGwatchCatListLabel"))
        self.WLSGwatchCatListTextbox = special_QLineEdit(self.watchlistSettingsGroup)
        self.WLSGwatchCatListTextbox.setGeometry(QtCore.QRect(125, 127, 311, 20))
        self.WLSGwatchCatListTextbox.setObjectName(_fromUtf8("WLSGwatchCatListTextbox"))
        self.WLSGsavepathLabel = QtGui.QLabel(self.watchlistSettingsGroup)
        self.WLSGsavepathLabel.setGeometry(QtCore.QRect(15, 165, 56, 16))
        self.WLSGsavepathLabel.setObjectName(_fromUtf8("WLSGsavepathLabel"))
        self.WLSGsavepathTextbox = special_QLineEdit(self.watchlistSettingsGroup)
        self.WLSGsavepathTextbox.setGeometry(QtCore.QRect(70, 162, 301, 20))
        self.WLSGsavepathTextbox.setObjectName(_fromUtf8("WLSGsavepathTextbox"))
        self.WLSGsavepathBrowseButton = QtGui.QPushButton(self.watchlistSettingsGroup)
        self.WLSGsavepathBrowseButton.setGeometry(QtCore.QRect(380, 160, 61, 23))
        self.WLSGsavepathBrowseButton.setObjectName(_fromUtf8("WLSGsavepathBrowseButton"))
        self.WLSGexternalCommandLabel = QtGui.QLabel(self.watchlistSettingsGroup)
        self.WLSGexternalCommandLabel.setGeometry(QtCore.QRect(15, 200, 101, 16))
        self.WLSGexternalCommandLabel.setObjectName(_fromUtf8("WLSGexternalCommandLabel"))
        self.WLSGexternalCommandTextbox = special_QLineEdit(self.watchlistSettingsGroup)
        self.WLSGexternalCommandTextbox.setGeometry(QtCore.QRect(115, 197, 256, 20))
        self.WLSGexternalCommandTextbox.setObjectName(_fromUtf8("WLSGexternalCommandTextbox"))
        self.WLSGexternalCommandBrowseButton = QtGui.QPushButton(self.watchlistSettingsGroup)
        self.WLSGexternalCommandBrowseButton.setGeometry(QtCore.QRect(380, 195, 61, 23))
        self.WLSGexternalCommandBrowseButton.setObjectName(_fromUtf8("WLSGexternalCommandBrowseButton"))
        self.WLSGexternalCommandArgsLabel = QtGui.QLabel(self.watchlistSettingsGroup)
        self.WLSGexternalCommandArgsLabel.setGeometry(QtCore.QRect(15, 235, 156, 16))
        self.WLSGexternalCommandArgsLabel.setObjectName(_fromUtf8("WLSGexternalCommandArgsLabel"))
        self.WLSGexternalCommandArgsTextbox = special_QLineEdit(self.watchlistSettingsGroup)
        self.WLSGexternalCommandArgsTextbox.setGeometry(QtCore.QRect(170, 232, 256, 20))
        self.WLSGexternalCommandArgsTextbox.setObjectName(_fromUtf8("WLSGexternalCommandArgsTextbox"))
        self.WLSGsizeLimitLowerLabel = QtGui.QLabel(self.watchlistSettingsGroup)
        self.WLSGsizeLimitLowerLabel.setGeometry(QtCore.QRect(15, 301, 81, 16))
        self.WLSGsizeLimitLowerLabel.setObjectName(_fromUtf8("WLSGsizeLimitLowerLabel"))
        self.WLSGsizeLimitUpperLabel = QtGui.QLabel(self.watchlistSettingsGroup)
        self.WLSGsizeLimitUpperLabel.setGeometry(QtCore.QRect(15, 333, 86, 16))
        self.WLSGsizeLimitUpperLabel.setObjectName(_fromUtf8("WLSGsizeLimitUpperLabel"))
        self.WLSGsizeLimitLowerTextbox = special_QLineEdit(self.watchlistSettingsGroup)
        self.WLSGsizeLimitLowerTextbox.setGeometry(QtCore.QRect(105, 299, 41, 20))
        self.WLSGsizeLimitLowerTextbox.setObjectName(_fromUtf8("WLSGsizeLimitLowerTextbox"))
        self.WLSGsizeLimitUpperTextbox = special_QLineEdit(self.watchlistSettingsGroup)
        self.WLSGsizeLimitUpperTextbox.setGeometry(QtCore.QRect(105, 331, 41, 20))
        self.WLSGsizeLimitUpperTextbox.setObjectName(_fromUtf8("WLSGsizeLimitUpperTextbox"))
        self.WLSGsizeLimitLowerSuffixSelector = special_QComboBox(self.watchlistSettingsGroup)
        self.WLSGsizeLimitLowerSuffixSelector.setGeometry(QtCore.QRect(150, 298, 51, 22))
        self.WLSGsizeLimitLowerSuffixSelector.setObjectName(_fromUtf8("WLSGsizeLimitLowerSuffixSelector"))
        self.WLSGsizeLimitLowerSuffixSelector.addItem(_fromUtf8(""))
        self.WLSGsizeLimitLowerSuffixSelector.addItem(_fromUtf8(""))
        self.WLSGsizeLimitLowerSuffixSelector.addItem(_fromUtf8(""))
        self.WLSGsizeLimitLowerSuffixSelector.addItem(_fromUtf8(""))
        self.WLSGsizeLimitUpperSuffixSelector = special_QComboBox(self.watchlistSettingsGroup)
        self.WLSGsizeLimitUpperSuffixSelector.setGeometry(QtCore.QRect(150, 330, 51, 22))
        self.WLSGsizeLimitUpperSuffixSelector.setObjectName(_fromUtf8("WLSGsizeLimitUpperSuffixSelector"))
        self.WLSGsizeLimitUpperSuffixSelector.addItem(_fromUtf8(""))
        self.WLSGsizeLimitUpperSuffixSelector.addItem(_fromUtf8(""))
        self.WLSGsizeLimitUpperSuffixSelector.addItem(_fromUtf8(""))
        self.WLSGsizeLimitUpperSuffixSelector.addItem(_fromUtf8(""))
        self.WLSGutWebUiCheckox = special_QCheckBox(self.watchlistSettingsGroup)
        self.WLSGutWebUiCheckox.setGeometry(QtCore.QRect(280, 313, 156, 17))
        self.WLSGutWebUiCheckox.setObjectName(_fromUtf8("WLSGutWebUiCheckox"))
        self.WLSGutWebUiCheckox.setTristate(True)
        self.WLSGftpUploadCheckbox = special_QCheckBox(self.watchlistSettingsGroup)
        self.WLSGftpUploadCheckbox.setGeometry(QtCore.QRect(280, 333, 131, 17))
        self.WLSGftpUploadCheckbox.setObjectName(_fromUtf8("WLSGftpUploadCheckbox"))
        self.WLSGenableExternalCmdCheckbox = special_QCheckBox(self.watchlistSettingsGroup)
        self.WLSGenableExternalCmdCheckbox.setGeometry(QtCore.QRect(280, 275, 161, 17))
        self.WLSGenableExternalCmdCheckbox.setObjectName(_fromUtf8("WLSGenableExternalCmdCheckbox"))
        self.WLSGemailCheckbox = special_QCheckBox(self.watchlistSettingsGroup)
        self.WLSGemailCheckbox.setGeometry(QtCore.QRect(280, 353, 126, 17))
        self.WLSGemailCheckbox.setObjectName(_fromUtf8("WLSGemailCheckbox"))
        self.WLSGdupecheckingCheckbox = special_QCheckBox(self.watchlistSettingsGroup)
        self.WLSGdupecheckingCheckbox.setGeometry(QtCore.QRect(280, 295, 101, 17))
        self.WLSGdupecheckingCheckbox.setObjectName(_fromUtf8("WLSGdupecheckingCheckbox"))
        self.horizontalLayout.addWidget(self.watchlistSettingsGroup)
        self.tabWidget.addTab(self.watchlistTab, _fromUtf8(""))
        
        
        ## Avoidlist Tab ##
        self.globalAvoidlistTab = QtGui.QWidget()
        self.globalAvoidlistTab.setObjectName(_fromUtf8("globalAvoidlistTab"))
        self.horizontalLayout_2 = QtGui.QHBoxLayout(self.globalAvoidlistTab)
        self.horizontalLayout_2.setObjectName(_fromUtf8("horizontalLayout_2"))
        self.avoidlistGroup = QtGui.QGroupBox(self.globalAvoidlistTab)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.avoidlistGroup.sizePolicy().hasHeightForWidth())
        self.avoidlistGroup.setSizePolicy(sizePolicy)
        self.avoidlistGroup.setMinimumSize(QtCore.QSize(300, 447))
        self.avoidlistGroup.setMaximumSize(QtCore.QSize(300, 447))
        self.avoidlistGroup.setObjectName(_fromUtf8("avoidlistGroup"))
        self.addAvoidEntryButton = QtGui.QPushButton(self.avoidlistGroup)
        self.addAvoidEntryButton.setGeometry(QtCore.QRect(12, 414, 20, 20))
        font = QtGui.QFont()
        font.setFamily(_fromUtf8("Segoe UI"))
        font.setPointSize(15)
        font.setBold(False)
        font.setWeight(50)
        font.setKerning(True)
        self.addAvoidEntryButton.setFont(font)
        self.addAvoidEntryButton.setMouseTracking(False)
        self.addAvoidEntryButton.setText(_fromUtf8(""))
        self.addAvoidEntryButton.setIcon(green_plus_icon)
        self.addAvoidEntryButton.setObjectName(_fromUtf8("addAvoidEntryButton"))
        self.removeAvoidEntryButton = QtGui.QPushButton(self.avoidlistGroup)
        self.removeAvoidEntryButton.setGeometry(QtCore.QRect(36, 414, 20, 20))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.removeAvoidEntryButton.setFont(font)
        self.removeAvoidEntryButton.setText(_fromUtf8(""))
        self.removeAvoidEntryButton.setIcon(red_x_icon)
        self.removeAvoidEntryButton.setObjectName(_fromUtf8("removeAvoidEntryButton"))
        self.avoidlistItemsList = special_QListWidget(self.avoidlistGroup)
        self.avoidlistItemsList.setSelectionMode(QtGui.QAbstractItemView.SingleSelection)
        self.avoidlistItemsList.setGeometry(QtCore.QRect(10, 20, 281, 391))
        self.avoidlistItemsList.setObjectName(_fromUtf8("avoidlistItemsList"))
        self.horizontalLayout_2.addWidget(self.avoidlistGroup)
        spacerItem1 = QtGui.QSpacerItem(6, 20, QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.avoidlistSettingsGroup = QtGui.QGroupBox(self.globalAvoidlistTab)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.avoidlistSettingsGroup.sizePolicy().hasHeightForWidth())
        self.avoidlistSettingsGroup.setSizePolicy(sizePolicy)
        self.avoidlistSettingsGroup.setMinimumSize(QtCore.QSize(450, 447))
        self.avoidlistSettingsGroup.setMaximumSize(QtCore.QSize(450, 447))
        self.avoidlistSettingsGroup.setObjectName(_fromUtf8("avoidlistSettingsGroup"))
        #Disabled on start
        self.avoidlistSettingsGroup.setDisabled(True)
        self.avoidNameTextbox = special_QLineEdit(self.avoidlistSettingsGroup)
        self.avoidNameTextbox.setGeometry(QtCore.QRect(90, 22, 291, 20))
        self.avoidNameTextbox.setObjectName(_fromUtf8("avoidNameTextbox"))
        self.avoidNameLabel = QtGui.QLabel(self.avoidlistSettingsGroup)
        self.avoidNameLabel.setGeometry(QtCore.QRect(15, 25, 71, 16))
        self.avoidNameLabel.setObjectName(_fromUtf8("avoidNameLabel"))
        self.avoidFilterLabel = QtGui.QLabel(self.avoidlistSettingsGroup)
        self.avoidFilterLabel.setGeometry(QtCore.QRect(15, 60, 66, 16))
        self.avoidFilterLabel.setObjectName(_fromUtf8("avoidFilterLabel"))
        self.avoidFilterTextbox = special_QLineEdit(self.avoidlistSettingsGroup)
        self.avoidFilterTextbox.setGeometry(QtCore.QRect(90, 57, 291, 20))
        self.avoidFilterTextbox.setObjectName(_fromUtf8("avoidFilterTextbox"))
        self.avoidFilterRegexCheck = special_QCheckBox(self.avoidlistSettingsGroup)
        self.avoidFilterRegexCheck.setGeometry(QtCore.QRect(390, 58, 61, 17))
        self.avoidFilterRegexCheck.setObjectName(_fromUtf8("avoidFilterRegexCheck"))
        self.horizontalLayout_2.addWidget(self.avoidlistSettingsGroup)
        self.tabWidget.addTab(self.globalAvoidlistTab, _fromUtf8(""))
        
        
        ## Email settings tab ##
        self.emailSettingsTab = QtGui.QWidget()
        self.emailSettingsTab.setObjectName(_fromUtf8("emailSettingsTab"))
        self.generalEmailSettings = QtGui.QGroupBox(self.emailSettingsTab)
        self.generalEmailSettings.setGeometry(QtCore.QRect(10, 15, 296, 146))
        self.generalEmailSettings.setObjectName(_fromUtf8("generalEmailSettings"))
        self.hostnameIPLabel = QtGui.QLabel(self.generalEmailSettings)
        self.hostnameIPLabel.setGeometry(QtCore.QRect(10, 50, 71, 16))
        self.hostnameIPLabel.setObjectName(_fromUtf8("hostnameIPLabel"))
        self.emailMasterEnableCheck = special_QCheckBox(self.generalEmailSettings)
        self.emailMasterEnableCheck.setGeometry(QtCore.QRect(15, 20, 111, 17))
        self.emailMasterEnableCheck.setObjectName(_fromUtf8("emailMasterEnableCheck"))
        self.emailUseTLSCheck = special_QCheckBox(self.generalEmailSettings)
        self.emailUseTLSCheck.setGeometry(QtCore.QRect(215, 100, 71, 17))
        self.emailUseTLSCheck.setObjectName(_fromUtf8("emailUseTLSCheck"))
        self.hostnameIPTextbox = special_QLineEdit(self.generalEmailSettings)
        self.hostnameIPTextbox.setGeometry(QtCore.QRect(80, 47, 131, 20))
        self.hostnameIPTextbox.setObjectName(_fromUtf8("hostnameIPTextbox"))
        self.portLabel = QtGui.QLabel(self.generalEmailSettings)
        self.portLabel.setGeometry(QtCore.QRect(220, 50, 26, 16))
        self.portLabel.setObjectName(_fromUtf8("portLabel"))
        self.portTextbox = special_QLineEdit(self.generalEmailSettings)
        self.portTextbox.setGeometry(QtCore.QRect(250, 47, 36, 20))
        self.portTextbox.setInputMethodHints(QtCore.Qt.ImhNone)
        self.portTextbox.setInputMask(_fromUtf8(""))
        self.portTextbox.setMaxLength(5)
        self.portTextbox.setObjectName(_fromUtf8("portTextbox"))
        self.usernameLabel = QtGui.QLabel(self.generalEmailSettings)
        self.usernameLabel.setGeometry(QtCore.QRect(10, 85, 61, 16))
        self.usernameLabel.setObjectName(_fromUtf8("usernameLabel"))
        self.passwordLabel = QtGui.QLabel(self.generalEmailSettings)
        self.passwordLabel.setGeometry(QtCore.QRect(10, 120, 61, 16))
        self.passwordLabel.setObjectName(_fromUtf8("passwordLabel"))
        self.usernameTextbox = special_QLineEdit(self.generalEmailSettings)
        self.usernameTextbox.setGeometry(QtCore.QRect(70, 82, 113, 20))
        self.usernameTextbox.setObjectName(_fromUtf8("usernameTextbox"))
        self.passwordTextbox = special_QLineEdit(self.generalEmailSettings)
        self.passwordTextbox.setGeometry(QtCore.QRect(70, 117, 113, 20))
        self.passwordTextbox.setEchoMode(QtGui.QLineEdit.Password)
        self.passwordTextbox.setObjectName(_fromUtf8("passwordTextbox"))
        self.emailMessageGroup = QtGui.QGroupBox(self.emailSettingsTab)
        self.emailMessageGroup.setGeometry(QtCore.QRect(345, 15, 401, 396))
        self.emailMessageGroup.setObjectName(_fromUtf8("emailMessageGroup"))
        self.emailFromLabel = QtGui.QLabel(self.emailMessageGroup)
        self.emailFromLabel.setGeometry(QtCore.QRect(15, 30, 41, 16))
        self.emailFromLabel.setObjectName(_fromUtf8("emailFromLabel"))
        self.emailFromTextbox = special_QLineEdit(self.emailMessageGroup)
        self.emailFromTextbox.setGeometry(QtCore.QRect(55, 27, 146, 20))
        self.emailFromTextbox.setInputMethodHints(QtCore.Qt.ImhEmailCharactersOnly)
        self.emailFromTextbox.setObjectName(_fromUtf8("emailFromTextbox"))
        self.emailToLabel = QtGui.QLabel(self.emailMessageGroup)
        self.emailToLabel.setGeometry(QtCore.QRect(215, 30, 21, 16))
        self.emailToLabel.setObjectName(_fromUtf8("emailToLabel"))
        self.emailToTextbox = special_QLineEdit(self.emailMessageGroup)
        self.emailToTextbox.setGeometry(QtCore.QRect(235, 27, 146, 20))
        self.emailToTextbox.setInputMethodHints(QtCore.Qt.ImhEmailCharactersOnly)
        self.emailToTextbox.setObjectName(_fromUtf8("emailToTextbox"))
        self.emailSubjectLabel = QtGui.QLabel(self.emailMessageGroup)
        self.emailSubjectLabel.setGeometry(QtCore.QRect(10, 65, 46, 16))
        self.emailSubjectLabel.setObjectName(_fromUtf8("emailSubjectLabel"))
        self.emailSubjectTextbox = special_QLineEdit(self.emailMessageGroup)
        self.emailSubjectTextbox.setGeometry(QtCore.QRect(55, 62, 326, 20))
        self.emailSubjectTextbox.setInputMethodHints(QtCore.Qt.ImhNone)
        self.emailSubjectTextbox.setFrame(True)
        self.emailSubjectTextbox.setDragEnabled(False)
        self.emailSubjectTextbox.setObjectName(_fromUtf8("emailSubjectTextbox"))
        self.emailMessageTextbox = special_QTextEdit(self.emailMessageGroup)
        self.emailMessageTextbox.setGeometry(QtCore.QRect(20, 115, 366, 261))
        self.emailMessageTextbox.setObjectName(_fromUtf8("emailMessageTextbox"))
        self.emailMessageLabel = QtGui.QLabel(self.emailMessageGroup)
        self.emailMessageLabel.setGeometry(QtCore.QRect(20, 95, 51, 16))
        self.emailMessageLabel.setObjectName(_fromUtf8("emailMessageLabel"))
        self.emailShortcutsGroup = QtGui.QGroupBox(self.emailSettingsTab)
        self.emailShortcutsGroup.setGeometry(QtCore.QRect(10, 180, 301, 231))
        self.emailShortcutsGroup.setObjectName(_fromUtf8("emailShortcutsGroup"))
        self.emailShortcutsList = QtGui.QTextEdit(self.emailShortcutsGroup)
        self.emailShortcutsList.setGeometry(QtCore.QRect(10, 15, 281, 206))
        self.emailShortcutsList.setReadOnly(True)
        self.emailShortcutsList.setTextInteractionFlags(QtCore.Qt.TextSelectableByKeyboard|QtCore.Qt.TextSelectableByMouse)
        self.emailShortcutsList.setObjectName(_fromUtf8("emailShortcutsList"))
        self.tabWidget.addTab(self.emailSettingsTab, _fromUtf8(""))
        
        
        ## About Tab ##
        self.aboutTab = QtGui.QWidget()
        self.aboutTab.setObjectName(_fromUtf8("aboutTab"))
        self.aboutGroup = QtGui.QGroupBox(self.aboutTab)
        self.aboutGroup.setGeometry(QtCore.QRect(180, 45, 411, 211))
        self.aboutGroup.setObjectName(_fromUtf8("aboutGroup"))
        self.aboutBoxGridLayout = QtGui.QGridLayout(self.aboutGroup)
        self.aboutBoxGridLayout.setObjectName(_fromUtf8("aboutBoxGridLayout"))
        self.agAboutTextbox = QtGui.QTextEdit(self.aboutGroup)
        self.agAboutTextbox.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.agAboutTextbox.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.agAboutTextbox.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.agAboutTextbox.setObjectName(_fromUtf8("agAboutTextbox"))
        self.aboutBoxGridLayout.addWidget(self.agAboutTextbox, 0, 0, 1, 1)
        self.aboutTabUpdateGroup = QtGui.QGroupBox(self.aboutTab)
        self.aboutTabUpdateGroup.setGeometry(QtCore.QRect(180, 285, 411, 76))
        self.aboutTabUpdateGroup.setObjectName(_fromUtf8("aboutTabUpdateGroup"))
        self.ugCliVerLabel = QtGui.QLabel(self.aboutTabUpdateGroup)
        self.ugCliVerLabel.setGeometry(QtCore.QRect(45, 19, 66, 16))
        self.ugCliVerLabel.setObjectName(_fromUtf8("ugCliVerLabel"))
        self.ugServVerLabel = QtGui.QLabel(self.aboutTabUpdateGroup)
        self.ugServVerLabel.setGeometry(QtCore.QRect(45, 44, 76, 16))
        self.ugServVerLabel.setObjectName(_fromUtf8("ugServVerLabel"))
        self.ugCliVerActual = QtGui.QLabel(self.aboutTabUpdateGroup)
        self.ugCliVerActual.setGeometry(QtCore.QRect(145, 20, 100, 13))
        self.ugCliVerActual.setTextFormat(QtCore.Qt.RichText)
        self.ugCliVerActual.setObjectName(_fromUtf8("ugCliVerActual"))
        self.ugServVerActual = QtGui.QLabel(self.aboutTabUpdateGroup)
        self.ugServVerActual.setGeometry(QtCore.QRect(145, 45, 100, 13))
        self.ugServVerActual.setTextFormat(QtCore.Qt.RichText)
        self.ugServVerActual.setObjectName(_fromUtf8("ugServVerActual"))
        self.ugCheckUpdateButton = QtGui.QPushButton(self.aboutTabUpdateGroup)
        self.ugCheckUpdateButton.setGeometry(QtCore.QRect(250, 28, 111, 23))
        self.ugCheckUpdateButton.setObjectName(_fromUtf8("ugCheckUpdateButton"))
        self.tabWidget.addTab(self.aboutTab, _fromUtf8(""))
        
        
        ## Button Box ##
        self.buttonBox = QtGui.QDialogButtonBox(self.centralwidget)
        self.buttonBox.setGeometry(QtCore.QRect(9, 532, 156, 23))
        self.buttonBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.buttonBox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Save)
        self.buttonBox.setObjectName(_fromUtf8("buttonBox"))
        sccw_SettingsUI.setCentralWidget(self.centralwidget)
        #Change cancel to quit
        self.buttonBox.button(QtGui.QDialogButtonBox.Cancel).setText("Quit")
       
       
        ## Menu Bar ##
        #File menu
        self.menubar = QtGui.QMenuBar(sccw_SettingsUI)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 805, 21))
        self.menubar.setObjectName(_fromUtf8("menubar"))
        self.menuFile = QtGui.QMenu(self.menubar)
        self.menuFile.setObjectName(_fromUtf8("menuFile"))
        sccw_SettingsUI.setMenuBar(self.menubar)
        menu_font = QtGui.QFont()
        menu_font.setFamily(_fromUtf8("Arial"))
        menu_font.setPointSize(8)
        self.action_New = QtGui.QAction(sccw_SettingsUI)
        new_doc_icon = QtGui.QIcon()
        new_doc_icon.addPixmap(QtGui.QPixmap(_fromUtf8(":/guiIcons/icons/Document-new-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_New.setIcon(new_doc_icon)
        self.action_New.setFont(menu_font)
        self.action_New.setObjectName(_fromUtf8("action_New"))
        self.actionOpen = QtGui.QAction(sccw_SettingsUI)
        open_file_icon = QtGui.QIcon()
        open_file_icon.addPixmap(QtGui.QPixmap(_fromUtf8(":/guiIcons/icons/open-file-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpen.setIcon(open_file_icon)
        self.actionOpen.setFont(menu_font)
        self.actionOpen.setObjectName(_fromUtf8("actionOpen"))
        self.actionSave = QtGui.QAction(sccw_SettingsUI)
        save_document_icon = QtGui.QIcon()
        save_document_icon.addPixmap(QtGui.QPixmap(_fromUtf8(":/guiIcons/icons/Actions-document-save-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSave.setIcon(save_document_icon)
        self.actionSave.setFont(menu_font)
        self.actionSave.setObjectName(_fromUtf8("actionSave"))
        self.actionSave_As = QtGui.QAction(sccw_SettingsUI)
        save_all_icon = QtGui.QIcon()
        save_all_icon.addPixmap(QtGui.QPixmap(_fromUtf8(":/guiIcons/icons/Actions-document-save-all-icon.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSave_As.setIcon(save_all_icon)
        self.actionSave_As.setFont(menu_font)
        self.actionSave_As.setObjectName(_fromUtf8("actionSave_As"))
        self.action_Quit = QtGui.QAction(sccw_SettingsUI)
        self.action_Quit.setIcon(red_x_icon)
        self.action_Quit.setFont(menu_font)
        self.action_Quit.setObjectName(_fromUtf8("action_Quit"))
        self.menuFile.addAction(self.action_New)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_As)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.action_Quit)
        self.menubar.addAction(self.menuFile.menuAction())
        #Edit Menu
        self.menu_Edit = QtGui.QMenu(self.menubar)
        self.menu_Edit.setObjectName(_fromUtf8("menu_Edit"))
        self.actionCut = QtGui.QAction(sccw_SettingsUI)
        self.actionCut.setObjectName(_fromUtf8("actionCut"))
        self.actionCut.setEnabled(False)
        self.actionCopy = QtGui.QAction(sccw_SettingsUI)
        self.actionCopy.setObjectName(_fromUtf8("actionCopy"))
        self.actionCopy.setEnabled(False)
        self.actionPaste = QtGui.QAction(sccw_SettingsUI)
        self.actionPaste.setObjectName(_fromUtf8("actionPaste"))
        self.actionPaste.setEnabled(False)
        self.actionDelete = QtGui.QAction(sccw_SettingsUI)
        self.actionDelete.setObjectName(_fromUtf8("actionDelete"))
        self.actionDelete.setEnabled(False)
        self.actionSelectAll = QtGui.QAction(sccw_SettingsUI)
        self.actionSelectAll.setObjectName(_fromUtf8("actionSelectAll"))
        self.actionSelectAll.setEnabled(False)
        self.actionUndo = QtGui.QAction(sccw_SettingsUI)
        self.actionUndo.setObjectName(_fromUtf8("actionUndo"))
        self.actionUndo.setEnabled(False)
        self.actionRedo = QtGui.QAction(sccw_SettingsUI)
        self.actionRedo.setObjectName(_fromUtf8("actionRedo"))
        self.actionRedo.setEnabled(False)
        self.menu_Edit.addAction(self.actionUndo)
        self.menu_Edit.addAction(self.actionRedo)
        self.menu_Edit.addSeparator()
        self.menu_Edit.addAction(self.actionCut)
        self.menu_Edit.addAction(self.actionCopy)
        self.menu_Edit.addAction(self.actionPaste)
        self.menu_Edit.addAction(self.actionDelete)
        self.menu_Edit.addSeparator()
        self.menu_Edit.addAction(self.actionSelectAll)
        
        #Add File and Edit menus to main menu bar
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menu_Edit.menuAction())
        
        #Disable sections by default
        self.ggVerboseTabTextbox.setEnabled(False)
        self.ftpHostnameTextbox.setEnabled(False)
        self.ftpPortTextbox.setEnabled(False)
        self.ftpUsernameTextbox.setEnabled(False)
        self.ftpPasswordTextbox.setEnabled(False)
        self.ftpRemoteFolderTextbox.setEnabled(False)
        self.ftpPasvModeCheck.setEnabled(False)
        self.ftpTLSModeCheck.setEnabled(False)
        self.utwuiHostnameTextbox.setEnabled(False)
        self.utwuiPortTextbox.setEnabled(False)
        self.utwuiUsernameTextbox.setEnabled(False)
        self.utwuiPasswordTextbox.setEnabled(False)
        self.extCmdExeLocation.setEnabled(False)
        self.extCmdBrowseButton.setEnabled(False)
        self.extCmdExeArguments.setEnabled(False)
        self.hostnameIPTextbox.setEnabled(False)
        self.portTextbox.setEnabled(False)
        self.usernameTextbox.setEnabled(False)
        self.passwordTextbox.setEnabled(False)
        self.emailUseTLSCheck.setEnabled(False)
        self.emailFromTextbox.setEnabled(False)
        self.emailToTextbox.setEnabled(False)
        self.emailSubjectTextbox.setEnabled(False)
        self.emailMessageTextbox.setEnabled(False)
        
        #buddy crap
        self.globalSizeLimitUpperLabel.setBuddy(self.WLSGsizeLimitUpperTextbox)
        self.globalSizeLimitLowerLabel.setBuddy(self.WLSGsizeLimitLowerTextbox)
        self.WLSGwatchNameLabel.setBuddy(self.WLSGwatchNameTextbox)
        self.WLSGwatchFilterLabel.setBuddy(self.WLSGwatchFilterTextbox)
        self.WLSGavoidFilterListLabel.setBuddy(self.WLSGavoidFilterListTextbox)
        self.WLSGwatchCatListLabel.setBuddy(self.WLSGwatchCatListTextbox)
        self.WLSGsavepathLabel.setBuddy(self.WLSGsavepathTextbox)
        self.WLSGexternalCommandLabel.setBuddy(self.WLSGexternalCommandTextbox)
        self.WLSGexternalCommandArgsLabel.setBuddy(self.WLSGexternalCommandArgsTextbox)
        self.WLSGsizeLimitLowerLabel.setBuddy(self.WLSGsizeLimitLowerTextbox)
        self.WLSGsizeLimitUpperLabel.setBuddy(self.WLSGsizeLimitUpperTextbox)

        ## Other Basic UI stuff ##
        self.retranslateUi(sccw_SettingsUI)
        self.tabWidget.setCurrentIndex(0)
        
        ## Slot connectors ##
        #Undo/Redo system
        self.undoRedoSystem.setupSlots()
        
        #File drag-and-drop support
        QtCore.QObject.connect(self.MainWindow, QtCore.SIGNAL("gotFileDrop"), self.guiActions.fileDropAction)
        #Script status update signal
        QtCore.QObject.connect(self.MainWindow, QtCore.SIGNAL("gotScriptStatusUpdate"), self.guiActions.updateScriptStatusCallback)
        #Closing signal
        #So apparently we can use the signal QApplication::aboutToQuit(void)
        QtCore.QObject.connect(self.MainWindow, QtCore.SIGNAL("appClosing"), self.guiActions.quitApp)
        #Menu actions
        QtCore.QObject.connect(self.action_Quit, QtCore.SIGNAL(_fromUtf8("triggered()")), self.guiActions.quitApp)
        QtCore.QObject.connect(self.actionOpen, QtCore.SIGNAL(_fromUtf8("triggered()")), self.guiActions.loadUiState)
        QtCore.QObject.connect(self.actionSave, QtCore.SIGNAL(_fromUtf8("triggered()")), self.guiActions.saveUiToFile)
        QtCore.QObject.connect(self.actionSave_As, QtCore.SIGNAL(_fromUtf8("triggered()")), self.guiActions.saveAsDialog)
        QtCore.QObject.connect(self.action_New, QtCore.SIGNAL(_fromUtf8("triggered()")), self.guiActions.newSettingsFile)
        #lower button box
        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL(_fromUtf8("accepted()")), self.guiActions.saveUiToFile)
        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL(_fromUtf8("rejected()")), self.guiActions.quitApp)
        
        QtCore.QObject.connect(self.WLGaddEntryButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.addWatchListItem)
        QtCore.QObject.connect(self.WLGremoveEntryButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.removeWatchListItem)
        QtCore.QObject.connect(self.addAvoidEntryButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.addAvoidListItem)
        QtCore.QObject.connect(self.removeAvoidEntryButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.removeAvoidListItem)
        QtCore.QObject.connect(self.WLGwatchlistItemsList, QtCore.SIGNAL(_fromUtf8("currentItemChanged(QListWidgetItem*, QListWidgetItem*)")), self.guiActions.updateCurrentWatchListSelection)
        QtCore.QObject.connect(self.avoidlistItemsList, QtCore.SIGNAL(_fromUtf8("currentItemChanged(QListWidgetItem*, QListWidgetItem*)")), self.guiActions.updateCurrentAvoidListSelection)
        QtCore.QObject.connect(self.WLSGwatchNameTextbox, QtCore.SIGNAL(_fromUtf8("textEdited(QString)")), self.guiActions.updateCurrentWatchTitle)
        QtCore.QObject.connect(self.WLSGwatchNameTextbox, QtCore.SIGNAL(_fromUtf8("undoredoUpdateSignal")), self.guiActions.updateCurrentWatchTitle)
        QtCore.QObject.connect(self.avoidNameTextbox, QtCore.SIGNAL(_fromUtf8("textEdited(QString)")), self.guiActions.updateCurrentAvoidTitle)
        QtCore.QObject.connect(self.avoidNameTextbox, QtCore.SIGNAL(_fromUtf8("undoredoUpdateSignal")), self.guiActions.updateCurrentAvoidTitle)
        #Buttons
        QtCore.QObject.connect(self.ggSavepathBrowseButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.browse_button_mainSavepath)
        QtCore.QObject.connect(self.ggLogpathBrowseButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.browse_button_mainLogpath)
        QtCore.QObject.connect(self.globalCFBypassCookiefileBrowseButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.browse_button_cookieFile)
        QtCore.QObject.connect(self.extCmdBrowseButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.browse_button_mainExtProgram)
        QtCore.QObject.connect(self.WLSGsavepathBrowseButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.browse_button_WLsavepath)
        QtCore.QObject.connect(self.WLSGexternalCommandBrowseButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.browse_button_WLextProgram)
        QtCore.QObject.connect(self.ugCheckUpdateButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.checkForUpdates)
        QtCore.QObject.connect(self.scbfReloadScriptSettingsButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.reloadScriptIniFile)
        QtCore.QObject.connect(self.scbfToggleAutodlButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.toggleScriptAutodl)
        QtCore.QObject.connect(self.scbfEditCurIniButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.loadActiveIni)
        QtCore.QObject.connect(self.scNetworkSettingsButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.openNetworkSettingsDialog)
        #Data update triggers
        ##Watchlist##
        #textboxes
        QtCore.QObject.connect(self.WLSGwatchNameTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), self.guiActions.saveAllWatchlistItems)
        QtCore.QObject.connect(self.WLSGwatchFilterTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), self.guiActions.saveAllWatchlistItems)
        QtCore.QObject.connect(self.WLSGavoidFilterListTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), self.guiActions.saveAllWatchlistItems)
        QtCore.QObject.connect(self.WLSGwatchCatListTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), self.guiActions.saveAllWatchlistItems)
        QtCore.QObject.connect(self.WLSGsavepathTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), self.guiActions.saveAllWatchlistItems)
        QtCore.QObject.connect(self.WLSGexternalCommandTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), self.guiActions.saveAllWatchlistItems)
        QtCore.QObject.connect(self.WLSGexternalCommandArgsTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), self.guiActions.saveAllWatchlistItems)
        QtCore.QObject.connect(self.WLSGsizeLimitLowerTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), self.guiActions.saveAllWatchlistItems)
        QtCore.QObject.connect(self.WLSGsizeLimitUpperTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), self.guiActions.saveAllWatchlistItems)
        #Checkboxes
        QtCore.QObject.connect(self.WLSGwatchFilterRegexCheck, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.saveAllWatchlistItems)
        QtCore.QObject.connect(self.WLSGavoidFilterListRegexCheck, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.saveAllWatchlistItems)
        QtCore.QObject.connect(self.WLSGenableExternalCmdCheckbox, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.saveAllWatchlistItems)
        QtCore.QObject.connect(self.WLSGdupecheckingCheckbox, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.saveAllWatchlistItems)
        QtCore.QObject.connect(self.WLSGutWebUiCheckox, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.saveAllWatchlistItems)
        QtCore.QObject.connect(self.WLSGftpUploadCheckbox, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.saveAllWatchlistItems)
        QtCore.QObject.connect(self.WLSGemailCheckbox, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.saveAllWatchlistItems)
        #QComboBox
        QtCore.QObject.connect(self.WLSGsizeLimitLowerSuffixSelector, QtCore.SIGNAL(_fromUtf8("currentIndexChanged(int)")), self.guiActions.saveAllWatchlistItems)
        QtCore.QObject.connect(self.WLSGsizeLimitUpperSuffixSelector, QtCore.SIGNAL(_fromUtf8("currentIndexChanged(int)")), self.guiActions.saveAllWatchlistItems)
        
        ##Avoidlist#
        QtCore.QObject.connect(self.avoidNameTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), self.guiActions.saveAllAvoidlistItems)
        QtCore.QObject.connect(self.avoidFilterTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), self.guiActions.saveAllAvoidlistItems)
        QtCore.QObject.connect(self.avoidFilterRegexCheck, QtCore.SIGNAL(_fromUtf8("clicked()")), self.guiActions.saveAllAvoidlistItems)
        
        #Enable/Disable Subsection checkboxes
        QtCore.QObject.connect(self.ggEnableVerboseCheck, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.ggVerboseTabTextbox.setEnabled)
        QtCore.QObject.connect(self.ftpMasterEnableCheck, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.guiActions.EDsection_ftpupload)
        QtCore.QObject.connect(self.utwuiMasterEnableTriCheck, QtCore.SIGNAL(_fromUtf8("stateChanged(int)")), self.guiActions.EDsection_utwebui)
        QtCore.QObject.connect(self.extCmdMasterEnableCheck, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.guiActions.EDsection_externalcmd)
        QtCore.QObject.connect(self.emailMasterEnableCheck, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), self.guiActions.EDsection_emailer)
        
        #Edit Menu
        QtCore.QObject.connect(self.menu_Edit, QtCore.SIGNAL(_fromUtf8("aboutToShow()")), self.guiActions.updateEditMenuStatus)
        QtCore.QObject.connect(self.actionUndo, QtCore.SIGNAL(_fromUtf8("triggered()")), self.undoRedoSystem.undo)
        QtCore.QObject.connect(self.actionRedo, QtCore.SIGNAL(_fromUtf8("triggered()")), self.undoRedoSystem.redo)
        QtCore.QObject.connect(self.actionCut, QtCore.SIGNAL(_fromUtf8("triggered()")), self.guiActions.customContextMenu_Cut)
        QtCore.QObject.connect(self.actionCopy, QtCore.SIGNAL(_fromUtf8("triggered()")), self.guiActions.customContextMenu_Copy)
        QtCore.QObject.connect(self.actionPaste, QtCore.SIGNAL(_fromUtf8("triggered()")), self.guiActions.customContextMenu_Paste)
        QtCore.QObject.connect(self.actionDelete, QtCore.SIGNAL(_fromUtf8("triggered()")), self.guiActions.customContextMenu_Delete)
        QtCore.QObject.connect(self.actionSelectAll, QtCore.SIGNAL(_fromUtf8("triggered()")), self.guiActions.customContextMenu_SelectAll)
        

        
        #This was supposed to make things easier, but im questioning things now
        #These control the size-limit and regex validators.
        gen_lower_updated = partial(self.guiActions.checkSizeLimitBounds, "gen")
        gen_upper_updated = partial(self.guiActions.checkSizeLimitBounds, "gen")
        wlist_lower_updated = partial(self.guiActions.checkSizeLimitBounds, "wlist")
        wlist_upper_updated = partial(self.guiActions.checkSizeLimitBounds, "wlist")
        QtCore.QObject.connect(self.globalSizeLimitLowerTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), gen_lower_updated)
        QtCore.QObject.connect(self.globalSizeLimitUpperTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), gen_upper_updated)
        QtCore.QObject.connect(self.WLSGsizeLimitLowerTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), wlist_lower_updated)
        QtCore.QObject.connect(self.WLSGsizeLimitUpperTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), wlist_upper_updated)
        QtCore.QObject.connect(self.globalSizeLimitLowerSuffixSelector, QtCore.SIGNAL(_fromUtf8("currentIndexChanged(int)")), gen_lower_updated)
        QtCore.QObject.connect(self.globalSizeLimitUpperSuffixSelector, QtCore.SIGNAL(_fromUtf8("currentIndexChanged(int)")), gen_upper_updated)
        QtCore.QObject.connect(self.WLSGsizeLimitLowerSuffixSelector, QtCore.SIGNAL(_fromUtf8("currentIndexChanged(int)")), wlist_lower_updated)
        QtCore.QObject.connect(self.WLSGsizeLimitUpperSuffixSelector, QtCore.SIGNAL(_fromUtf8("currentIndexChanged(int)")), wlist_upper_updated)
        #Regex validators
        wlist_watch_regex_check = partial(self.guiActions.checkRegexContent, self.WLSGwatchFilterTextbox, self.WLSGwatchFilterRegexCheck)
        wlist_avoid_regex_check = partial(self.guiActions.checkRegexContent, self.WLSGavoidFilterListTextbox, self.WLSGavoidFilterListRegexCheck)
        alist_avoid_regex_check = partial(self.guiActions.checkRegexContent, self.avoidFilterTextbox, self.avoidFilterRegexCheck)
        QtCore.QObject.connect(self.WLSGwatchFilterTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), wlist_watch_regex_check)
        QtCore.QObject.connect(self.WLSGavoidFilterListTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), wlist_avoid_regex_check)
        QtCore.QObject.connect(self.avoidFilterTextbox, QtCore.SIGNAL(_fromUtf8("editingFinished()")), alist_avoid_regex_check)
        QtCore.QObject.connect(self.WLSGwatchFilterRegexCheck, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), wlist_watch_regex_check)
        QtCore.QObject.connect(self.WLSGavoidFilterListRegexCheck, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), wlist_avoid_regex_check)
        QtCore.QObject.connect(self.avoidFilterRegexCheck, QtCore.SIGNAL(_fromUtf8("toggled(bool)")), alist_avoid_regex_check)
        
        #Finally connect our slots
        QtCore.QMetaObject.connectSlotsByName(sccw_SettingsUI)
        
        ## Tab Order ##
        #General
        sccw_SettingsUI.setTabOrder(self.tabWidget, self.ggPasskeyTextbox)
        sccw_SettingsUI.setTabOrder(self.ggPasskeyTextbox, self.ggSavepathTextbox)
        sccw_SettingsUI.setTabOrder(self.ggSavepathTextbox, self.ggSavepathBrowseButton)
        sccw_SettingsUI.setTabOrder(self.ggSavepathBrowseButton, self.ggLogpathTextbox)
        sccw_SettingsUI.setTabOrder(self.ggLogpathTextbox, self.ggLogpathBrowseButton)
        sccw_SettingsUI.setTabOrder(self.ggLogpathBrowseButton, self.ggNetworkDelaySpinbox)
        sccw_SettingsUI.setTabOrder(self.ggNetworkDelaySpinbox, self.ggMasterAutodlCheck)
        sccw_SettingsUI.setTabOrder(self.ggMasterAutodlCheck, self.ggEnableLoggingCheck)
        sccw_SettingsUI.setTabOrder(self.ggEnableLoggingCheck, self.ggEnableVerboseCheck)
        sccw_SettingsUI.setTabOrder(self.ggEnableVerboseCheck, self.ggVerboseTabTextbox)
        sccw_SettingsUI.setTabOrder(self.ggVerboseTabTextbox, self.ggBeepCheckbox)
        sccw_SettingsUI.setTabOrder(self.ggBeepCheckbox, self.ggEnableDebugCheck)
        sccw_SettingsUI.setTabOrder(self.ggEnableDebugCheck, self.scNetworkSettingsButton)
        sccw_SettingsUI.setTabOrder(self.scNetworkSettingsButton, self.scbfReloadScriptSettingsButton)
        sccw_SettingsUI.setTabOrder(self.scbfReloadScriptSettingsButton, self.scbfToggleAutodlButton)
        sccw_SettingsUI.setTabOrder(self.scbfToggleAutodlButton, self.scbfEditCurIniButton)
        sccw_SettingsUI.setTabOrder(self.scbfEditCurIniButton, self.globalDupecheckCheck)
        sccw_SettingsUI.setTabOrder(self.globalDupecheckCheck, self.globalSSLDownloadCheck)
        sccw_SettingsUI.setTabOrder(self.globalSSLDownloadCheck, self.globalSizeLimitLowerTextbox)
        sccw_SettingsUI.setTabOrder(self.globalSizeLimitLowerTextbox, self.globalSizeLimitLowerSuffixSelector)
        sccw_SettingsUI.setTabOrder(self.globalSizeLimitLowerSuffixSelector, self.globalSizeLimitUpperTextbox)
        sccw_SettingsUI.setTabOrder(self.globalSizeLimitUpperTextbox, self.globalSizeLimitUpperSuffixSelector)
        sccw_SettingsUI.setTabOrder(self.globalSizeLimitUpperSuffixSelector, self.globalMaxTriesSpinbox)
        sccw_SettingsUI.setTabOrder(self.globalMaxTriesSpinbox, self.globalRetryWaitSpinbox)
        sccw_SettingsUI.setTabOrder(self.globalRetryWaitSpinbox, self.globalCFBypassCookiefilePathTextbox)
        sccw_SettingsUI.setTabOrder(self.globalCFBypassCookiefilePathTextbox, self.globalCFBypassCookiefileBrowseButton)
        sccw_SettingsUI.setTabOrder(self.globalCFBypassCookiefileBrowseButton, self.globalCFBypassUseragentTextbox)
        sccw_SettingsUI.setTabOrder(self.globalCFBypassUseragentTextbox, self.extCmdMasterEnableCheck)
        sccw_SettingsUI.setTabOrder(self.extCmdMasterEnableCheck, self.extCmdExeLocation)
        sccw_SettingsUI.setTabOrder(self.extCmdExeLocation, self.extCmdBrowseButton)
        sccw_SettingsUI.setTabOrder(self.extCmdBrowseButton, self.extCmdExeArguments)
        sccw_SettingsUI.setTabOrder(self.extCmdExeArguments, self.ftpMasterEnableCheck)
        sccw_SettingsUI.setTabOrder(self.ftpMasterEnableCheck, self.ftpHostnameTextbox)
        sccw_SettingsUI.setTabOrder(self.ftpHostnameTextbox, self.ftpPortTextbox)
        sccw_SettingsUI.setTabOrder(self.ftpPortTextbox, self.ftpUsernameTextbox)
        sccw_SettingsUI.setTabOrder(self.ftpUsernameTextbox, self.ftpPasswordTextbox)
        sccw_SettingsUI.setTabOrder(self.ftpPasswordTextbox, self.ftpRemoteFolderTextbox)
        sccw_SettingsUI.setTabOrder(self.ftpRemoteFolderTextbox, self.ftpPasvModeCheck)
        sccw_SettingsUI.setTabOrder(self.ftpPasvModeCheck, self.ftpTLSModeCheck)
        sccw_SettingsUI.setTabOrder(self.ftpTLSModeCheck, self.utwuiMasterEnableTriCheck)
        sccw_SettingsUI.setTabOrder(self.utwuiMasterEnableTriCheck, self.utwuiHostnameTextbox)
        sccw_SettingsUI.setTabOrder(self.utwuiHostnameTextbox, self.utwuiPortTextbox)
        sccw_SettingsUI.setTabOrder(self.utwuiPortTextbox, self.utwuiUsernameTextbox)
        sccw_SettingsUI.setTabOrder(self.utwuiUsernameTextbox, self.utwuiPasswordTextbox)
        sccw_SettingsUI.setTabOrder(self.utwuiPasswordTextbox, self.WLGwatchlistItemsList)
        #Watchlist
        sccw_SettingsUI.setTabOrder(self.WLGwatchlistItemsList, self.WLGaddEntryButton)
        sccw_SettingsUI.setTabOrder(self.WLGaddEntryButton, self.WLGremoveEntryButton)
        sccw_SettingsUI.setTabOrder(self.WLGremoveEntryButton, self.WLSGwatchNameTextbox)
        sccw_SettingsUI.setTabOrder(self.WLSGwatchNameTextbox, self.WLSGwatchFilterTextbox)
        sccw_SettingsUI.setTabOrder(self.WLSGwatchFilterTextbox, self.WLSGwatchFilterRegexCheck)
        sccw_SettingsUI.setTabOrder(self.WLSGwatchFilterRegexCheck, self.WLSGavoidFilterListTextbox)
        sccw_SettingsUI.setTabOrder(self.WLSGavoidFilterListTextbox, self.WLSGavoidFilterListRegexCheck)
        sccw_SettingsUI.setTabOrder(self.WLSGavoidFilterListRegexCheck, self.WLSGwatchCatListTextbox)
        sccw_SettingsUI.setTabOrder(self.WLSGwatchCatListTextbox, self.WLSGsavepathTextbox)
        sccw_SettingsUI.setTabOrder(self.WLSGsavepathTextbox, self.WLSGsavepathBrowseButton)
        sccw_SettingsUI.setTabOrder(self.WLSGsavepathBrowseButton, self.WLSGexternalCommandTextbox)
        sccw_SettingsUI.setTabOrder(self.WLSGexternalCommandTextbox, self.WLSGexternalCommandBrowseButton)
        sccw_SettingsUI.setTabOrder(self.WLSGexternalCommandBrowseButton, self.WLSGexternalCommandArgsTextbox)
        sccw_SettingsUI.setTabOrder(self.WLSGexternalCommandArgsTextbox, self.WLSGsizeLimitLowerTextbox)
        sccw_SettingsUI.setTabOrder(self.WLSGsizeLimitLowerTextbox, self.WLSGsizeLimitLowerSuffixSelector)
        sccw_SettingsUI.setTabOrder(self.WLSGsizeLimitLowerSuffixSelector, self.WLSGsizeLimitUpperTextbox)
        sccw_SettingsUI.setTabOrder(self.WLSGsizeLimitUpperTextbox, self.WLSGsizeLimitUpperSuffixSelector)
        sccw_SettingsUI.setTabOrder(self.WLSGsizeLimitUpperSuffixSelector, self.WLSGenableExternalCmdCheckbox)
        sccw_SettingsUI.setTabOrder(self.WLSGenableExternalCmdCheckbox, self.WLSGdupecheckingCheckbox)
        sccw_SettingsUI.setTabOrder(self.WLSGdupecheckingCheckbox, self.WLSGutWebUiCheckox)
        sccw_SettingsUI.setTabOrder(self.WLSGutWebUiCheckox, self.WLSGftpUploadCheckbox)
        sccw_SettingsUI.setTabOrder(self.WLSGftpUploadCheckbox, self.WLSGemailCheckbox)
        sccw_SettingsUI.setTabOrder(self.WLSGemailCheckbox, self.avoidlistItemsList)
        #Avoidlist
        sccw_SettingsUI.setTabOrder(self.avoidlistItemsList, self.addAvoidEntryButton)
        sccw_SettingsUI.setTabOrder(self.addAvoidEntryButton, self.removeAvoidEntryButton)
        sccw_SettingsUI.setTabOrder(self.removeAvoidEntryButton, self.avoidNameTextbox)
        sccw_SettingsUI.setTabOrder(self.avoidNameTextbox, self.avoidFilterTextbox)
        sccw_SettingsUI.setTabOrder(self.avoidFilterTextbox, self.avoidFilterRegexCheck)
        sccw_SettingsUI.setTabOrder(self.avoidFilterRegexCheck, self.emailMasterEnableCheck)
        #Email Settings
        sccw_SettingsUI.setTabOrder(self.emailMasterEnableCheck, self.hostnameIPTextbox)
        sccw_SettingsUI.setTabOrder(self.hostnameIPTextbox, self.portTextbox)
        sccw_SettingsUI.setTabOrder(self.portTextbox, self.usernameTextbox)
        sccw_SettingsUI.setTabOrder(self.usernameTextbox, self.passwordTextbox)
        sccw_SettingsUI.setTabOrder(self.passwordTextbox, self.emailUseTLSCheck)
        sccw_SettingsUI.setTabOrder(self.emailUseTLSCheck, self.emailFromTextbox)
        sccw_SettingsUI.setTabOrder(self.emailFromTextbox, self.emailToTextbox)
        sccw_SettingsUI.setTabOrder(self.emailToTextbox, self.emailSubjectTextbox)
        sccw_SettingsUI.setTabOrder(self.emailSubjectTextbox, self.emailMessageTextbox)
        sccw_SettingsUI.setTabOrder(self.emailMessageTextbox, self.emailShortcutsList)
        sccw_SettingsUI.setTabOrder(self.emailShortcutsList, self.agAboutTextbox)
        sccw_SettingsUI.setTabOrder(self.agAboutTextbox, self.ugCheckUpdateButton)
        sccw_SettingsUI.setTabOrder(self.ugCheckUpdateButton, self.buttonBox)
        
        #Set up timer to constantly check script status. 5 seconds seems fine
        #self.timer = QtCore.QTimer()
        #QtCore.QObject.connect(self.timer, QtCore.SIGNAL("timeout()"), self.guiActions.getScriptStatus)
        #self.timer.start(5000)
        #Get first run out of the way
        #self.guiActions.getScriptStatus()
        
        #Start client thread for GUI <-> script coms
        self.guiActions.startClientThread()
        
        #set up a new document
        self.guiActions.newSettingsFile()
        
    def retranslateUi(self, sccw_SettingsUI):
        sccw_SettingsUI.setWindowTitle(_translate("sccw_SettingsUI", "SCCwatcher - New Settings File", None))
        
         #General tab
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.mainTab), _translate("sccw_SettingsUI", "General", None))
        self.generalGroup.setTitle(_translate("sccw_SettingsUI", "General Settings", None))
        self.ggMasterAutodlCheck.setText(_translate("sccw_SettingsUI", "Enable Autodl at Startup", None))
        self.ggNetworkDelaySpinbox.setSuffix(_translate("sccw_SettingsUI", " s", None))
        self.ggNetworkDelayLabel.setText(_translate("sccw_SettingsUI", "Startup Network Detection Delay:", None))
        self.ggPasskeyLabel.setText(_translate("sccw_SettingsUI", "Passkey:", None))
        self.ggSavepathLabel.setText(_translate("sccw_SettingsUI", "Savepath:", None))
        self.ggLogpathLabel.setText(_translate("sccw_SettingsUI", "Logpath:", None))
        self.ggSavepathBrowseButton.setText(_translate("sccw_SettingsUI", "Browse", None))
        self.ggLogpathBrowseButton.setText(_translate("sccw_SettingsUI", "Browse", None))
        self.ggEnableLoggingCheck.setText(_translate("sccw_SettingsUI", "Enable Logging to File", None))
        self.ggEnableVerboseCheck.setText(_translate("sccw_SettingsUI", "Enable Verbose Output", None))
        self.ggBeepCheckbox.setText(_translate("sccw_SettingsUI", "Beep on Download", None))
        self.ggVerboseTabLabel.setText(_translate("sccw_SettingsUI", "Verbose Tab Name:", None))
        self.ggEnableDebugCheck.setText(_translate("sccw_SettingsUI", "Enable Debug Mode", None))
        self.scriptStatusGroup.setTitle(_translate("sccw_SettingsUI", "Script Status", None))
        self.ssVersionLabel.setText(_translate("sccw_SettingsUI", "SCCwatcher Version:", None))
        self.ssVersionState.setText(_translate("sccw_SettingsUI", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600; color:#ff0000;\">_VERSION_</span></p></body></html>", None))
        self.ssStatusLabel.setText(_translate("sccw_SettingsUI", "Autodownload Status:", None))
        self.ssStatusState.setText(_translate("sccw_SettingsUI", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600; color:#ff0000;\">_ONOFF_</span></p></body></html>", None))
        self.ssSSLDownloadLabel.setText(_translate("sccw_SettingsUI", "SSL Downloading: ", None))
        self.ssSSLDownloadState.setText(_translate("sccw_SettingsUI", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600; color:#00c800;\">_ONOFF_</span></p></body></html>", None))
        self.ssCloudflareLabel.setText(_translate("sccw_SettingsUI", "Cloudflare Workaround: ", None))
        self.ssCloudflareState.setText(_translate("sccw_SettingsUI", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600; color:#ff0000;\">_ONOFF_</span></p></body></html>", None))
        self.ssDupecheckingLabel.setText(_translate("sccw_SettingsUI", "Dupechecking:", None))
        self.ssDupecheckingState.setText(_translate("sccw_SettingsUI", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600; color:#ff0000;\">_ONOFF_</span></p></body></html>", None))
        self.ssLoggingLabel.setText(_translate("sccw_SettingsUI", "Logging to File:", None))
        self.ssLoggingState.setText(_translate("sccw_SettingsUI", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600; color:#ff0000;\">_ONOFF_</span></p></body></html>", None))
        self.ssRecentLabel.setText(_translate("sccw_SettingsUI", "Recent Grab List Size:", None))
        self.ssRecentState.setText(_translate("sccw_SettingsUI", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600; color:#ff0000;\">_LISTSIZE_</span></p></body></html>", None))
        self.ssWatchAvoidLabel.setText(_translate("sccw_SettingsUI", "Watchlist Size/Avoidlist Size:", None))
        self.ssWatchAvoidState.setText(_translate("sccw_SettingsUI", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600; color:#ff0000;\">_WL/AL_</span></p></body></html>", None))
        self.ssMaxTriesLabel.setText(_translate("sccw_SettingsUI", "Maximum Redownload Tries:", None))
        self.ssRetryDelayLabel.setText(_translate("sccw_SettingsUI", "Download Retry Delay:", None))
        self.ssMaxTriesState.setText(_translate("sccw_SettingsUI", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600; color:#ff0000;\">_MAXTRY_</span></p></body></html>", None))
        self.ssRetryDelayState.setText(_translate("sccw_SettingsUI", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600; color:#ff0000;\">_TRYDELAY_</span></p></body></html>", None))
        self.ssVerboseState.setText(_translate("sccw_SettingsUI", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600; color:#ff0000;\">_ONOFF_</span></p></body></html>", None))
        self.ssVerboseLabel.setText(_translate("sccw_SettingsUI", "Verbose Output:", None))
        self.scriptControlGroup.setTitle(_translate("sccw_SettingsUI", "Script Control", None))
        self.scbfReloadScriptSettingsButton.setText(_translate("sccw_SettingsUI", "Reload Script Settings", None))
        self.scbfToggleAutodlButton.setText(_translate("sccw_SettingsUI", "Toggle Auto Downloading", None))
        self.scbfEditCurIniButton.setText(_translate("sccw_SettingsUI", "Edit Current scc2.ini", None))
        self.sccsConStatusLabel.setText(_translate("sccw_SettingsUI", "<html><head/><body><p><span style=\" font-size:12pt;\">Script Connection: </span></p></body></html>", None))
        self.sccsConStatusState.setText(_translate("sccw_SettingsUI", "<html><head/><body><p><span style=\" color:#ff0000;\">_SCRIPT_CONNECTION_STATUS_</span></p></body></html>", None))
        
        #Download/Upload Settings Tab
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.downloadUploadTab), _translate("sccw_SettingsUI", "Download/Upload Settings", None))
        self.generalDownloadSettingsGroup.setTitle(_translate("sccw_SettingsUI", "Global Download Settings", None))
        self.globalSSLDownloadCheck.setText(_translate("sccw_SettingsUI", "SSL Downloading", None))
        self.globalDupecheckCheck.setText(_translate("sccw_SettingsUI", "Dupechecking", None))
        self.globalSizeLimitLowerSuffixSelector.setItemText(0, _translate("sccw_SettingsUI", "", None))
        self.globalSizeLimitLowerSuffixSelector.setItemText(1, _translate("sccw_SettingsUI", "KB", None))
        self.globalSizeLimitLowerSuffixSelector.setItemText(2, _translate("sccw_SettingsUI", "MB", None))
        self.globalSizeLimitLowerSuffixSelector.setItemText(3, _translate("sccw_SettingsUI", "GB", None))
        self.globalSizeLimitUpperLabel.setText(_translate("sccw_SettingsUI", "Size limit (upper):", None))
        self.globalSizeLimitUpperSuffixSelector.setItemText(0, _translate("sccw_SettingsUI", "", None))
        self.globalSizeLimitUpperSuffixSelector.setItemText(1, _translate("sccw_SettingsUI", "KB", None))
        self.globalSizeLimitUpperSuffixSelector.setItemText(2, _translate("sccw_SettingsUI", "MB", None))
        self.globalSizeLimitUpperSuffixSelector.setItemText(3, _translate("sccw_SettingsUI", "GB", None))
        self.globalSizeLimitLowerLabel.setText(_translate("sccw_SettingsUI", "Size limit (lower):", None))
        self.globalRetryWaitLabel.setText(_translate("sccw_SettingsUI", "Retry Wait:", None))
        self.globalMaxTriesLabel.setText(_translate("sccw_SettingsUI", "Max Tries:", None))
        self.globalCFBypassLabel.setText(_translate("sccw_SettingsUI", "Cloudflare Bypass Options:", None))
        self.globalCFBypassCookiefileLabel.setText(_translate("sccw_SettingsUI", "Cookie File:", None))
        self.globalCFBypassCookiefileBrowseButton.setText(_translate("sccw_SettingsUI", "Browse", None))
        self.globalCFBypassUseragentLabel.setText(_translate("sccw_SettingsUI", "Useragent String:", None))
        self.utWebUiUploadGroup.setTitle(_translate("sccw_SettingsUI", "uTorrent WebUI Uploader", None))
        self.utwuiMasterEnableTriCheck.setText(_translate("sccw_SettingsUI", "uTorrent WebUI Upload Mode:", None))
        self.utwuiStateLabel.setText(_translate("sccw_SettingsUI", "<html><head/><body><p><span style=\" font-weight:600; color:#ff0000;\">Disabled</span></p></body></html>", None))
        self.utwuiPortLabel.setText(_translate("sccw_SettingsUI", "Port:", None))
        self.utwuiHostnameLabel.setText(_translate("sccw_SettingsUI", "Hostname/IP:", None))
        self.utwuiPasswordLabel.setText(_translate("sccw_SettingsUI", "Password:", None))
        self.utwuiUsernameLabel.setText(_translate("sccw_SettingsUI", "Username:", None))
        self.ftpUploadGroup.setTitle(_translate("sccw_SettingsUI", "FTP Uploader", None))
        self.ftpMasterEnableCheck.setText(_translate("sccw_SettingsUI", "Enable FTP Uploading", None))
        self.ftpHostnameLabel.setText(_translate("sccw_SettingsUI", "Hostname/IP:", None))
        self.ftpUsernameLabel.setText(_translate("sccw_SettingsUI", "Username:", None))
        self.ftpPasswordLabel.setText(_translate("sccw_SettingsUI", "Password:", None))
        self.ftpPortLabel.setText(_translate("sccw_SettingsUI", "Port:", None))
        self.ftpRemoteFolderLabel.setText(_translate("sccw_SettingsUI", "Remote Folder:", None))
        self.ftpPasvModeCheck.setText(_translate("sccw_SettingsUI", "Passive Mode (PASV)", None))
        self.ftpTLSModeCheck.setText(_translate("sccw_SettingsUI", "Use TLS (FTPS)", None))
        self.externalCommandGroup.setTitle(_translate("sccw_SettingsUI", "External Command Settings", None))
        self.extCmdBrowseButton.setText(_translate("sccw_SettingsUI", "Browse", None))
        self.extCmdMasterEnableCheck.setText(_translate("sccw_SettingsUI", "Enable External Command", None))
        self.extCmdSelectProgramLabel.setText(_translate("sccw_SettingsUI", "Select Program:", None))
        self.extCmdArguemtsLabel.setText(_translate("sccw_SettingsUI", "Arguments:", None))

        #Watch List Tab
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.watchlistTab), _translate("sccw_SettingsUI", "Watch List", None))
        self.watchlistGroup.setTitle(_translate("sccw_SettingsUI", "Watchlist Items:", None))
        self.watchlistSettingsGroup.setTitle(_translate("sccw_SettingsUI", "Watch Settings:", None))
        self.WLSGwatchNameLabel.setText(_translate("sccw_SettingsUI", "Watch Name: ", None))
        self.WLSGwatchFilterLabel.setText(_translate("sccw_SettingsUI", "Watch Filter:", None))
        self.WLSGwatchFilterRegexCheck.setText(_translate("sccw_SettingsUI", "Regex", None))
        self.WLSGavoidFilterListLabel.setText(_translate("sccw_SettingsUI", "Avoid Filter List: ", None))
        self.WLSGavoidFilterListRegexCheck.setText(_translate("sccw_SettingsUI", "Regex", None))
        self.WLSGwatchCatListLabel.setText(_translate("sccw_SettingsUI", "Watch Category List: ", None))
        self.WLSGsavepathLabel.setText(_translate("sccw_SettingsUI", "Savepath: ", None))
        self.WLSGsavepathBrowseButton.setText(_translate("sccw_SettingsUI", "Browse", None))
        self.WLSGexternalCommandLabel.setText(_translate("sccw_SettingsUI", "External Command:", None))
        self.WLSGexternalCommandBrowseButton.setText(_translate("sccw_SettingsUI", "Browse", None))
        self.WLSGexternalCommandArgsLabel.setText(_translate("sccw_SettingsUI", "External Command Arguments: ", None))
        self.WLSGsizeLimitLowerLabel.setText(_translate("sccw_SettingsUI", "Size limit (lower):", None))
        self.WLSGsizeLimitUpperLabel.setText(_translate("sccw_SettingsUI", "Size limit (upper):", None))
        self.WLSGsizeLimitLowerSuffixSelector.setItemText(0, _translate("sccw_SettingsUI", "", None))
        self.WLSGsizeLimitLowerSuffixSelector.setItemText(1, _translate("sccw_SettingsUI", "KB", None))
        self.WLSGsizeLimitLowerSuffixSelector.setItemText(2, _translate("sccw_SettingsUI", "MB", None))
        self.WLSGsizeLimitLowerSuffixSelector.setItemText(3, _translate("sccw_SettingsUI", "GB", None))
        self.WLSGsizeLimitUpperSuffixSelector.setItemText(0, _translate("sccw_SettingsUI", "", None))
        self.WLSGsizeLimitUpperSuffixSelector.setItemText(1, _translate("sccw_SettingsUI", "KB", None))
        self.WLSGsizeLimitUpperSuffixSelector.setItemText(2, _translate("sccw_SettingsUI", "MB", None))
        self.WLSGsizeLimitUpperSuffixSelector.setItemText(3, _translate("sccw_SettingsUI", "GB", None))
        self.WLSGutWebUiCheckox.setText(_translate("sccw_SettingsUI", "Upload to uTorrent WebUI", None))
        self.WLSGftpUploadCheckbox.setText(_translate("sccw_SettingsUI", "Upload to FTP server", None))
        self.WLSGenableExternalCmdCheckbox.setText(_translate("sccw_SettingsUI", "Enable External Command", None))
        self.WLSGemailCheckbox.setText(_translate("sccw_SettingsUI", "Email on download", None))
        self.WLSGdupecheckingCheckbox.setText(_translate("sccw_SettingsUI", "Dupechecking", None))
        
        #Avoid List Tab
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.globalAvoidlistTab), _translate("sccw_SettingsUI", "Global Avoid List", None))
        self.avoidlistGroup.setTitle(_translate("sccw_SettingsUI", "Avoidlist Items:", None))
        self.avoidlistSettingsGroup.setTitle(_translate("sccw_SettingsUI", "Avoid Settings:", None))
        self.avoidNameLabel.setText(_translate("sccw_SettingsUI", "Avoid Name: ", None))
        self.avoidFilterLabel.setText(_translate("sccw_SettingsUI", "Avoid Filter:", None))
        self.avoidFilterRegexCheck.setText(_translate("sccw_SettingsUI", "Regex", None))
        
        
        #General Emailer Settings Tab
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.emailSettingsTab), _translate("sccw_SettingsUI", "Emailer Settings", None))
        self.generalEmailSettings.setTitle(_translate("sccw_SettingsUI", "General Emailer Settings", None))
        self.hostnameIPLabel.setText(_translate("sccw_SettingsUI", "Hostname/IP:", None))
        self.emailMasterEnableCheck.setText(_translate("sccw_SettingsUI", "Enable Emailer", None))
        self.emailUseTLSCheck.setText(_translate("sccw_SettingsUI", "Use TLS", None))
        self.portLabel.setText(_translate("sccw_SettingsUI", "Port:", None))
        self.usernameLabel.setText(_translate("sccw_SettingsUI", "Username: ", None))
        self.passwordLabel.setText(_translate("sccw_SettingsUI", "Password: ", None))
        self.emailMessageGroup.setTitle(_translate("sccw_SettingsUI", "Enter Message", None))
        self.emailFromLabel.setText(_translate("sccw_SettingsUI", "From:", None))
        self.emailToLabel.setText(_translate("sccw_SettingsUI", "To:", None))
        self.emailSubjectLabel.setText(_translate("sccw_SettingsUI", "Subject:", None))
        self.emailMessageLabel.setText(_translate("sccw_SettingsUI", "Message:", None))
        self.emailShortcutsGroup.setTitle(_translate("sccw_SettingsUI", "Shortcuts:", None))
        self.emailShortcutsList.setHtml(_translate("sccw_SettingsUI", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Tahoma\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600; color:#b037b0;\">%torrent%</span><span style=\" font-size:8pt;\"> - The name of the torrent.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600; color:#b037b0;\">%category%</span><span style=\" font-size:8pt;\"> - The category the torrent is in.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600; color:#b037b0;\">%size%</span><span style=\" font-size:8pt;\"> - The size of the torrent.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600; color:#b037b0;\">%time%</span><span style=\" font-size:8pt;\"> - The current time.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600; color:#b037b0;\">%dlpath%</span><span style=\" font-size:8pt;\"> - The path the torrent was saved to locally (if it wasnt saved locally, this is NONE)</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600; color:#b037b0;\">%ulpath%</span><span style=\" font-size:8pt;\"> - The hostname/port/dir path of the ftp server set in scc2.ini. I.e. ftp://ftp.myserver.com:21/torrents</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600; color:#b037b0;\">%utserver%</span><span style=\" font-size:8pt;\"> - The hostname/port of the uTorrent WebUI server set in scc2.ini. I.e. myserver.com:55124</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600; color:#b037b0;\">%watchname%</span><span style=\" font-size:8pt;\"> - This will be the name of the watch entry. If the torrent was downloaded using /manual_add it will be set to Manual Add.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600; color:#b037b0;\">%torrentpath%</span><span style=\" font-size:8pt;\"> - Complete path to the .torrent file downloaded, including the filename and extension.</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600; color:#b037b0;\">%sccgrptree%</span><span style=\" font-size:8pt;\"> - mimics the functionality of SCCGRPTREE</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600; color:#b037b0;\">%sccgrp%</span><span style=\" font-size:8pt;\"> - mimics the functionality of SCCGRP</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600; color:#b037b0;\">%sccdate%</span><span style=\" font-size:8pt;\"> - This will output a date in the form MMDD, just like SCCDATE does when making new watch dirs.</span></p></body></html>", None))
        
        
        #About tab
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.aboutTab), _translate("sccw_SettingsUI", "About", None))
        self.aboutGroup.setTitle(_translate("sccw_SettingsUI", "About", None))
        self.agAboutTextbox.setHtml(_translate("sccw_SettingsUI", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Tahoma\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:18pt; font-weight:600; color:#b037b0;\">SCCwatcher</span></p>\n"
"<p align=\"center\" style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; font-weight:600; color:#000000;\">version: %s</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; color:#000000;\">Main script written in Python using only standard libraries. This GUI was written in Python using the PyQt framework. This script was written by TRB for the fine people of SCC. If you encounter any bugs, have any issues getting things working, or have any ideas or feature requests please contact TRB on the forums or on IRC.</span></p>\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\"><br /></span></p></body></html>" % (self.SettingsManager.CURRENT_GUI_VERSION), None))
        self.aboutTabUpdateGroup.setTitle(_translate("sccw_SettingsUI", "Update", None))
        self.ugCliVerLabel.setText(_translate("sccw_SettingsUI", "Your Version: ", None))
        self.ugServVerLabel.setText(_translate("sccw_SettingsUI", "Latest Version: ", None))
        self.ugCliVerActual.setText(_translate("sccw_SettingsUI", "<html><head/><body><p><span style=\" font-weight:600; color:#0055ff;\">%s</span></p></body></html>" % (self.SettingsManager.CURRENT_GUI_VERSION), None))
        self.ugServVerActual.setText(_translate("sccw_SettingsUI", "<html><head/><body><p><span style=\" font-weight:600; color:#ff5500;\">???</span></p></body></html>", None))
        self.ugCheckUpdateButton.setText(_translate("sccw_SettingsUI", "Check for Updates", None))
        
        #Menu Bar text and shortcuts
        #File Menu
        self.menuFile.setTitle(_translate("sccw_SettingsUI", "&File", None))
        self.action_New.setText(_translate("sccw_SettingsUI", "&New", None))
        self.action_New.setShortcut(QtCore.Qt.Key_N | QtCore.Qt.CTRL)
        self.actionOpen.setText(_translate("sccw_SettingsUI", "&Open...", None))
        self.actionOpen.setShortcut(QtCore.Qt.Key_O | QtCore.Qt.CTRL)
        self.actionSave.setText(_translate("sccw_SettingsUI", "&Save", None))
        self.actionSave.setShortcut(QtCore.Qt.Key_S | QtCore.Qt.CTRL)
        self.actionSave_As.setText(_translate("sccw_SettingsUI", "Save &As...", None))
        self.actionSave_As.setShortcut(QtCore.Qt.Key_S | QtCore.Qt.CTRL | QtCore.Qt.ALT)
        self.action_Quit.setText(_translate("sccw_SettingsUI", "&Quit", None))
        self.action_Quit.setShortcut(QtCore.Qt.Key_Q | QtCore.Qt.CTRL)
        #Edit Menu
        self.menu_Edit.setTitle(_translate("sccw_SettingsUI", "&Edit", None))
        self.actionUndo.setText(_translate("sccw_SettingsUI", "&Undo", None))
        self.actionUndo.setShortcut(QtCore.Qt.Key_Z | QtCore.Qt.CTRL)
        self.actionRedo.setText(_translate("sccw_SettingsUI", "&Redo", None))
        self.actionRedo.setShortcut(QtCore.Qt.Key_Y | QtCore.Qt.CTRL)
        self.actionCut.setText(_translate("sccw_SettingsUI", "Cu&t", None))
        self.actionCut.setShortcut(QtCore.Qt.Key_X | QtCore.Qt.CTRL)
        self.actionCopy.setText(_translate("sccw_SettingsUI", "&Copy", None))
        self.actionCopy.setShortcut(QtCore.Qt.Key_C | QtCore.Qt.CTRL)
        self.actionPaste.setText(_translate("sccw_SettingsUI", "&Paste", None))
        self.actionPaste.setShortcut(QtCore.Qt.Key_V | QtCore.Qt.CTRL)
        self.actionDelete.setText(_translate("sccw_SettingsUI", "&Delete", None))
        self.actionDelete.setShortcut(QtCore.Qt.Key_Delete)
        self.actionSelectAll.setText(_translate("sccw_SettingsUI", "&Select All", None))
        self.actionSelectAll.setShortcut(QtCore.Qt.Key_A | QtCore.Qt.CTRL)
        
        ##Tooltips, LOTS of em
        self.ggMasterAutodlCheck.setToolTip(_translate("sccw_SettingsUI", "Enable/Disable automatically starting the autodl script at startup If disabled, \n""you will have to manually detect network settings using the SCCwatcher menu \n""in the Xchat/Hexchat GUI or use the text command: /sccwatcher detectnetwork ", None))
        self.ggNetworkDelaySpinbox.setToolTip(_translate("sccw_SettingsUI", "This delays when SCCwatcher checks the network settings, allowing \n""some time for your client to get connected to the network and into \n""the channel before the script detects the network settings.", None))
        self.ggPasskeyTextbox.setToolTip(_translate("sccw_SettingsUI", "See the end of the first post of the SCCwatcher topic in \n""the forums for help with finding your passkey.", None))
        self.ggSavepathTextbox.setToolTip(_translate("sccw_SettingsUI", "This is the base path where SCCwatcher will download .torrent files to.", None))
        self.ggLogpathTextbox.setToolTip(_translate("sccw_SettingsUI", "This folder is where SCCwatcher will keep its log file.", None))
        self.ggEnableLoggingCheck.setToolTip(_translate("sccw_SettingsUI", "This will enable/disable the logging feature. Log files \n""are placed in the savepath if the logpath is left empty.", None))
        self.ggEnableVerboseCheck.setToolTip(_translate("sccw_SettingsUI", "This will enable/disable verbose output. This will output all important \n""information from SCCwatcher into a separate tab. This tab will be named \n""SCCwatcher by default unless you change this (see Verbose Tab Name).", None))
        self.ggBeepCheckbox.setToolTip(_translate("sccw_SettingsUI", "Enable/Disable a system bell whenever a download occurs.", None))
        self.ggVerboseTabTextbox.setToolTip(_translate("sccw_SettingsUI", "This will change the name of the verbose output tab.", None))
        self.ggEnableDebugCheck.setToolTip(_translate("sccw_SettingsUI", "Enable/Disable debug mode. Debug mode will output info on the processes \n""involved in the script deciding whether or not to download a release. This \n""aids in diagnosing any issues with the script.", None))
        self.globalSSLDownloadCheck.setToolTip(_translate("sccw_SettingsUI", "Enable/Disable SSL downloading of torrents.", None))
        self.globalDupecheckCheck.setToolTip(_translate("sccw_SettingsUI", "Enable/Disable Dupechecking. When enabled SCCwatcher will not download the exact same release twice.", None))
        self.globalSizeLimitLowerSuffixSelector.setToolTip(_translate("sccw_SettingsUI", "If you do not choose a suffix the size limit function will be disabled.", None))
        self.globalSizeLimitUpperTextbox.setToolTip(_translate("sccw_SettingsUI", "Upper size limit for this watch item. Anything larger than \n""this won\'t be downloaded.", None))
        self.globalSizeLimitUpperSuffixSelector.setToolTip(_translate("sccw_SettingsUI", "If you do not choose a suffix the size limit function will be disabled.", None))
        self.globalSizeLimitLowerTextbox.setToolTip(_translate("sccw_SettingsUI", "Lower size limit for this watch item. Anything smaller than \n""this won\'t be downloaded.", None))
        self.globalRetryWaitLabel.setToolTip(_translate("sccw_SettingsUI", "Wait time (in seconds) between retrying a failed download.", None))
        self.globalMaxTriesLabel.setToolTip(_translate("sccw_SettingsUI", "Maximum number of times SCCwatcher will try to download a release.", None))
        self.globalMaxTriesSpinbox.setToolTip(_translate("sccw_SettingsUI", "Maximum number of times SCCwatcher will try to download a release.", None))
        self.globalRetryWaitSpinbox.setToolTip(_translate("sccw_SettingsUI", "Wait time (in seconds) between retrying a failed download.", None))
        self.globalCFBypassCookiefilePathTextbox.setToolTip(_translate("sccw_SettingsUI", "This is the path to the file containing the required cookies to bypass Cloudflare protection.", None))
        self.globalCFBypassUseragentTextbox.setToolTip(_translate("sccw_SettingsUI", "This must be the exact same userstring as the browser you use to browse SCC.\n""See whatsmyuseragent.com to get your useragent string.", None))
        self.utwuiMasterEnableTriCheck.setToolTip(_translate("sccw_SettingsUI", "This controls the uTorrent WebUI Upload function.\n""Unchecked means no WebUI upload is done. \n""Half checked means both the normal download and the WebUI Upload are executed.\n""Fully checked means only the WebUI Upload function is used. No torrent will be downloaded locally.", None))
        self.utwuiPortTextbox.setToolTip(_translate("sccw_SettingsUI", "Port number for the uTorrent WebUI.", None))
        self.utwuiPasswordTextbox.setToolTip(_translate("sccw_SettingsUI", "Password (if required) for the uTorrent WebUI.", None))
        self.utwuiUsernameTextbox.setToolTip(_translate("sccw_SettingsUI", "Username (if required) for the uTorrent WebUI.", None))
        self.utwuiHostnameTextbox.setToolTip(_translate("sccw_SettingsUI", "Hostname or IP address of the uTorrent WebUI to upload to.", None))
        self.ftpMasterEnableCheck.setToolTip(_translate("sccw_SettingsUI", "Enable/Disable uploading to FTP server. ", None))
        self.ftpHostnameTextbox.setToolTip(_translate("sccw_SettingsUI", "Hostname or IP address of the FTP server.", None))
        self.ftpUsernameTextbox.setToolTip(_translate("sccw_SettingsUI", "Username (if required) for the FTP server.", None))
        self.ftpPasswordTextbox.setToolTip(_translate("sccw_SettingsUI", "Password (if required) for the FTP server.", None))
        self.ftpPortTextbox.setToolTip(_translate("sccw_SettingsUI", "Port number of the FTP server (usually port 21).", None))
        self.ftpRemoteFolderTextbox.setToolTip(_translate("sccw_SettingsUI", "The remote path on the FTP server to upload the torrent files to.", None))
        self.ftpPasvModeCheck.setToolTip(_translate("sccw_SettingsUI", "Enable/Disable passive mode for your FTP server. It is recommended \n""that you use PASV if it\'s supported by your FTP server.", None))
        self.ftpTLSModeCheck.setToolTip(_translate("sccw_SettingsUI", "Use TLS encryption when uploading to FTP server. ", None))
        self.extCmdExeLocation.setToolTip(_translate("sccw_SettingsUI", "This is the path to an executable to be used by the external-command feature, if enabled.", None))
        self.extCmdMasterEnableCheck.setToolTip(_translate("sccw_SettingsUI", "Enable/Disable the optional external command function. This will \n""exectute any function you want when a torrent is downloaded.", None))
        self.extCmdExeArguments.setToolTip(_translate("sccw_SettingsUI", "Any arguments to be used with the external command feature. \n""All of the shortcuts listed on the \"Emailer Settings\" tab work here.", None))
        self.WLGaddEntryButton.setToolTip(_translate("sccw_SettingsUI", "Add new watchlist entry.", None))
        self.WLGremoveEntryButton.setToolTip(_translate("sccw_SettingsUI", "Remove currently selected watchlist entry.", None))
        self.WLSGwatchNameTextbox.setToolTip(_translate("sccw_SettingsUI", "The name of the watchlist item. This is for display purposes \n""only and has no effect on the operation of the script.", None))
        self.WLSGwatchFilterTextbox.setToolTip(_translate("sccw_SettingsUI", "SCCwatcher will download any release matching this filter.", None))
        self.WLSGwatchFilterRegexCheck.setToolTip(_translate("sccw_SettingsUI", "Enabe/Disable regular expressions in the watch filter.", None))
        self.WLSGavoidFilterListTextbox.setToolTip(_translate("sccw_SettingsUI", "SCCwatcher will avoid any release name that matches this filter.", None))
        self.WLSGavoidFilterListRegexCheck.setToolTip(_translate("sccw_SettingsUI", "Enabe/Disable regular expressions in the avoid filter.", None))
        self.WLSGwatchCatListTextbox.setToolTip(_translate("sccw_SettingsUI", "This is a list of categories you want SCCwatcher to monitor for this filter. A list of \n""acceptable categories is available in the first post of the official SCCwatcher topic.", None))
        self.WLSGsavepathTextbox.setToolTip(_translate("sccw_SettingsUI", "This is the path where SCCwatcher will save matched .torrent files to.", None))
        self.WLSGexternalCommandTextbox.setToolTip(_translate("sccw_SettingsUI", "This is the path to an executable to be used by the external-command feature, if enabled.", None))
        self.WLSGexternalCommandArgsTextbox.setToolTip(_translate("sccw_SettingsUI", "Any arguments to be used with the external command feature. \n""All of the shortcuts listed on the \"Emailer Settings\" tab work here.", None))
        self.WLSGsizeLimitLowerTextbox.setToolTip(_translate("sccw_SettingsUI", "Lower size limit for this watch item. Anything smaller than \n""this won\'t be downloaded.", None))
        self.WLSGsizeLimitUpperTextbox.setToolTip(_translate("sccw_SettingsUI", "Upper size limit for this watch item. Anything larger than \n""this won\'t be downloaded.", None))
        self.WLSGsizeLimitLowerSuffixSelector.setToolTip(_translate("sccw_SettingsUI", "If you do not choose a suffix the size limit function will be disabled.", None))
        self.WLSGsizeLimitUpperSuffixSelector.setToolTip(_translate("sccw_SettingsUI", "If you do not choose a suffix the size limit function will be disabled.", None))
        self.WLSGutWebUiCheckox.setToolTip(_translate("sccw_SettingsUI", "This controls the uTorrent WebUI Upload function.\n""Unchecked means no WebUI upload is done. \n""Half checked means both the normal download and the WebUI Upload are executed.\n""Fully checked means only the WebUI Upload function is used. No torrent will be downloaded locally.", None))
        self.WLSGftpUploadCheckbox.setToolTip(_translate("sccw_SettingsUI", "Enable/Disable uploading to FTP server. This will use the ftp \n""settings given on the \"Download/Upload Settings\" tab.", None))
        self.WLSGenableExternalCmdCheckbox.setToolTip(_translate("sccw_SettingsUI", "Enable/Disable the use of the optional external command feature.", None))
        self.WLSGemailCheckbox.setToolTip(_translate("sccw_SettingsUI", "Enable/Disable the emailer feature for this filter. This \n""will use the info given on the \"Emailer Settings\" tab.", None))
        self.WLSGdupecheckingCheckbox.setToolTip(_translate("sccw_SettingsUI", "Enable/Disable the dupechecking feature.", None))
        self.addAvoidEntryButton.setToolTip(_translate("sccw_SettingsUI", "Add new avoidlist entry.", None))
        self.removeAvoidEntryButton.setToolTip(_translate("sccw_SettingsUI", "Remove currently selected avoidlist entry.", None))
        self.avoidNameTextbox.setToolTip(_translate("sccw_SettingsUI", "The avoid filter\'s name. This is just for display purposes and has no effect on the operation of the script.", None))
        self.avoidFilterTextbox.setToolTip(_translate("sccw_SettingsUI", "SCCwatcher will avoid any release name that matches this filter.", None))
        self.avoidFilterRegexCheck.setToolTip(_translate("sccw_SettingsUI", "This enables/disables the use of regular expressions in the avoid filter.", None))
        self.emailMasterEnableCheck.setToolTip(_translate("sccw_SettingsUI", "Enable/Disable the email function of this script.", None))
        self.emailUseTLSCheck.setToolTip(_translate("sccw_SettingsUI", "This will enable/disable the use of TLS. It is highly recommended that you use TLS when possible.", None))
        self.hostnameIPTextbox.setToolTip(_translate("sccw_SettingsUI", "The hostname or IP address of the outgoing SMTP server to use for sending emails.", None))
        self.portTextbox.setToolTip(_translate("sccw_SettingsUI", "The port number of the SMTP server (commonly 25, 465, or 587).", None))
        self.usernameTextbox.setToolTip(_translate("sccw_SettingsUI", "Username (if required) for the SMTP server.", None))
        self.passwordTextbox.setToolTip(_translate("sccw_SettingsUI", "Password (if required) for the SMTP server.", None))
        self.emailFromTextbox.setToolTip(_translate("sccw_SettingsUI", "Your email address.", None))
        self.emailToTextbox.setToolTip(_translate("sccw_SettingsUI", "The recipient\'s email address.", None))
        self.emailSubjectTextbox.setToolTip(_translate("sccw_SettingsUI", "The subject of the email. You may use any of the shortcuts (listed on the left) here.", None))
        self.emailMessageTextbox.setToolTip(_translate("sccw_SettingsUI", "The email message itself goes here. You may use any of the shortcuts (listed to the left).", None))