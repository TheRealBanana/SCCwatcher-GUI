Bugs/problems:
None
		
------------------------------------
------------------------------------
------------------------------------
FIXED
	forgot to hook the X-button closing mechanism. Users can lose all unsaved data by closing with the x-button in the corner of the application.
	The app doesnt ask to save changes when a user tries to open a file after modifying a new setting file
	The app doesn't care if the user clicks cancel in the save dialog after clicking save in the unsaved changes warning dialog.


DONE! Set default file type for file dialog when saving and loading.
	
DONE! What is the cancel button even supposed to do? Changed to quit
	Change it to quit? (also accomplished by file > Quit) (Done using setText() command of QPushButton class, which was retrieved using QButtonBox's button() function.
	Change it to "Reset to defaults" (i.e. blank out entire GUI or just current page" (isnt that what new is supposed to do?) (already accomplished by File > New)

DONE! Make regex validator for text input on gui.
 Basically set the updated() (or whatever) slot of the textbox to a custom function
 custom function will check the regex and return if it fails or not
 It will have a flood filter of sorts. Only accepts new inputs every 3 seconds or so. Otherwise it returns wat it already has.
Final form: No flood timer was necessary, we use the editingFinished() signal to only check the regular expression once when focus leaves the box.
		-No need for flood timers
		-Only runs when the user changes focus out of the box or toggles the regex checkbox
Regex function was easy, just a re.comple() statement inside a try/except.

DONE! Need live checking of Size Limit boxes to make sure the lower doesnt exceed the upper limit
	What to do when it does?
		- Color text red?
		- Make it impossible to select anything lower/higher than the bounds the user sets (upper limit cant be smaller than lower limit and vice-versa for lower limit).
			How can we do that?
				- Live update minimum and maximum values
					Can this even be done with a textbox?
						YES!
							-We have a live check function that runs whenever the textbox is updated
							-Function will keep track of bounds and automatically push input values to within bounds if they are out of it.
							e.g. If lower limit is 100MB and the user enter 50MB in the upper limit, the upper limit will change to 101MB automatically
									Is this even a good idea?
										Might be a better idea just to turn text red, rather than change the input.

DONE! Implement Current Version/Update check in about box
	Two ways to do this:
		Easy way: 
			We upload a text file to github with just the current version number in it. 
			The application now downloads this file using the master link and checks its version against the downloaded file
	   Hard way:
			We use the github api to do this all.
				I've never used the github api before.
				adds further complication by requiring SOAP or something.
				Also requires me to label releases with the proper version numbers IN GIT, rather than the current system of not doing anything.
	
	Turns our the hard way was actually just as easy to do as the easy way and gave more information than my easy way would have. 
	
DONE! TOOLTIPS!

DONE! Copy general options to watch items as applicable
	e.g. If External command is enabled globally, then its also set in the watch
		Ways to do it:
			Loop through all applicable global options and set the state of the respective options under the watch
			Change the reset data to include the options selected.			

DONE! Make sure selecting a file with a file dialog updates the stored data for the list items
	currently it doesnt save the data until the user clicks out of the box, it should update immediately.
	If the user selects the directory and then immediately saves the file the directory will not be saved.
		
DONE! Implement New button.
	Needs to ask user whether or not to save current file
	Then clears out all settings and starts new
	Would be nice to have the change detection system up before we implement this
		Would like to ask user if they want to save changes when creating new document
			Uses the change detection system to see if any changes were made since the last save


DONE! Change save dialog to switch to Save-as dialog when no settings file is selected
	Currently saving from fresh start gives an error.

DONE! Implement system to detect changes. If anything differes from default, the document might need to be saved.
	This system is only useful as a way to detect if the user has any changes on a new file
	What we really need is a system to detect changes from default AND from last saved.
		Maybe for working documents, every time we save we update the reset data defaults with the new data
			This way we cant compare with the reset data to see if any changes have been made to the open document
	How it will work:
		Program starts, reset data starts off set to the default blank state.
		User loads an ini or saves changes to ini file. 
			New defaults are created and set corresponding to the data loaded or saved.
		Whenever the user tries to load, quit, or create a new document, we check the current settings to see if they match the saved defaults.
			If the saved defaults and the current settings do not match, we inform the user here have been changes made and ask to save.
		Resource usage? 
			Shoudnt been too bad, just as much work goes into saving and loading. Adding a comparison shouldnt bog it down.

DONE! Prevent duplicate QWatchListItem titles

DONE! Implement save-as dialog

DONE! Implement system to detect when the ini file being loaded is not a valid file.
	Pretty simple, just check if it has GlobalSettings. If it doesnt we say it's not good.


DONE! Make it impossible to "double-load", where watches and avoids from the last file are kept along with the new watches.
	It should ask the user if they want to save the old file
	Then it should clear the GUI
	THen it should finally load the new settings
	--
	This one requires other stuff to be done first. We need the save-as dialog and logic that detects when we are trying to save without 
	any settings file loaded. This will be easier to do once save-as is finished

DONE! - Master checkbox to enable/disable subsection:
	General Tab - "Enable Verbose Output"
	Dl/Ul Tab  - "Enable FTP Uploading"
	Dl/Ul Tab  - "uT WebUI Uploader Mode"
	Dl/Ul Tab  - "Enable External Command"
	Email Tab  - "Enable Emailer"

Done! - Implement utorrent uploader checkbox/QLabel logic


---------------------------------------------------------------
Todo to finish app entirely:
A LOT!
Have to integrate it with sccwatcher script
	Need to add new checks, new settings manager, everything.
		options dict will now be the dict thats created by loadSettings()
			Must update all references to options dict with subdicts
			On loading we must create a list of watch names so its easier to reference them later
				Load up ini file, discard General Options
					All options left that start with a minus sign are avoids
					All options left are watches.


Implementing status group on first tab:
	We should be able to make a simple function now without needing to fully integrate sccw1.0 and sccw2.0.
		We'll make a function that takes in a simple dict with the status in the form of strings (preferrably in their final form)
		This will allow us to later go back to sccw1.0 and add in a function that sends this data
			How should we send the data?
				Function hook? 
					- Probably the best solution but requires tight integration between sccw1 and sccw2
					- In theory the best solution
				Sockets?
					- Probably the most robust solution, allowing the client to be on a completely different computer
					- Added robustness also increases complexity since ip and port will be needed for anything besides local connections
				FiFo?
					- Almost as robust as function hooks and sockets but much simplier to implement.
					- Feels like an unfavorable, "dirty" solution. Sockets are a mess but this is just not an elegant solution.
				Initial Arguments?
					- Offers same flexibility of the Function hook but allows easier access between sccw1 and sccw2.
					
GUI/SCRIPT INTEGRATION:
	Keep on_text() basically the same. 
	After on_text() matches a release name to a watch filter, we create a new variable called ext_opts (extended options).
		ext_opts contains all the individual options for the watch filter we matched. These options include:
			Min and max sizes
			download location
			ftp/webUI/ext function options
		All of tests in on_text for size/dupe/etc are going to use ext_opts instead of the global options dict
			Since all of the global options are inferred if they are missing from ext_opts, there is no issue with using ext_opts instead of global options{} where ever.
			
			
			
			
			
=========================
==WOULD BE NICE TO HAVE ==
=========================

							
Undo/Redo system? (not necessary for completion) - deferred, TBD
	Would have to be able to track every change as its made, which means hooking every single element that can be edited.
	Is it really necessary?
	Use a simple stack system, with a FIFO (first-in, first-out) mentality 
		Each time the user changes something, we push that the previous value and the element name to the stack.
		
		User requests an undo operation:
			We first pop off the top element in the Undo stack.
			Next we take the current value of the element and save it to a Redo stack with the same FIFO rules.
			Now we apply the value saved in the Undo stack to the element.
			We repeat this process each time an Undo is requested until the Undo stack is depleted.
		
		User requests a redo operation:
			We pop off the top element in the Redo stack.
			Next we save the current value of the element to the top of the Undo stack
			Now we apply the value saved in the redo stack to the element
			Repeat for each Redo operation requested until the Redo stack is empty
			
		User makes a new unique change:
			Delete the entire redo stack
			Take the previous value of the element changed and save it to the Undo stack
			
	How to know when anything is changed?
		We will have to literally connect the changed signal for every item in the app with the undo/redo system.
			Have a separate file wih all the connections and code in it to save space in the gui actions file.
	
	How does any of this work with the avoid/watch lists?
		We'd have to save the watch name as well as the element name and previous value.
	
	What if we just stored the exact inverse operation required in a string, so that it could be eval'd.
	When eval'd the undo or redo operation will be completed. No need to know the element name or anything.
		Still have to know what operations to do before run-time. We have to plan.